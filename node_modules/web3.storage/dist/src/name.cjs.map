{"version":3,"file":"name.cjs","sources":["../../src/name.js"],"sourcesContent":["/**\n * A client library for the w3name - IPNS over HTTP API. It provides a\n * convenient interface for creating names, making revisions to name records,\n * and publishing and resolving them via the HTTP API.\n *\n * @example\n * ```js\n * import { Web3Storage } from 'web3.storage'\n * import * as Name from 'web3.storage/name'\n *\n * const client = new Web3Storage({ token: API_TOKEN })\n * const name = await Name.create()\n *\n * console.log('Name:', name.toString())\n * // e.g. k51qzi5uqu5di9agapykyjh3tqrf7i14a7fjq46oo0f6dxiimj62knq13059lt\n *\n * // The value to publish\n * const value = '/ipfs/bafkreiem4twkqzsq2aj4shbycd4yvoj2cx72vezicletlhi7dijjciqpui'\n * const revision = await Name.v0(name, value)\n *\n * // Publish the revision\n * await Name.publish(client, revision, name.key)\n *\n * // Resolve the latest value\n * await Name.resolve(name)\n * ```\n * @module\n */\nimport { fromString as uint8ArrayFromString } from 'uint8arrays/from-string'\nimport { toString as uint8ArrayToString } from 'uint8arrays/to-string'\nimport * as ipns from 'ipns'\nimport * as Digest from 'multiformats/hashes/digest'\nimport { identity } from 'multiformats/hashes/identity'\nimport { base36 } from 'multiformats/bases/base36'\nimport { CID } from 'multiformats/cid'\nimport { keys } from 'libp2p-crypto'\nimport * as cbor from 'cborg'\nimport { fetch } from './platform.js'\n\nconst libp2pKeyCode = 0x72\nconst ONE_YEAR = 1000 * 60 * 60 * 24 * 365\n\nconst defaultValidity = () => new Date(Date.now() + ONE_YEAR).toISOString()\n\n/**\n * @typedef {{\n *   bytes: Uint8Array,\n *   verify (data: Uint8Array, signature: Uint8Array): Promise<boolean>\n * }} PublicKey\n *\n * @typedef {{\n *   sign (data: Uint8Array): Promise<Uint8Array>\n * }} SigningKey\n *\n * @typedef {{\n *   public: PublicKey,\n *   bytes: Uint8Array\n * } & SigningKey} PrivateKey\n */\n\n/**\n * Name is an IPNS key ID.\n */\nexport class Name {\n  /**\n   * @param {PublicKey} pubKey Public key.\n   */\n  constructor (pubKey) {\n    /**\n     * @private\n     */\n    this._pubKey = pubKey\n  }\n\n  get bytes () {\n    const digest = Digest.create(identity.code, this._pubKey.bytes)\n    return CID.createV1(libp2pKeyCode, digest).bytes\n  }\n\n  toString () {\n    const digest = Digest.create(identity.code, this._pubKey.bytes)\n    return CID.createV1(libp2pKeyCode, digest).toString(base36)\n  }\n}\n\n/**\n * WritableName is a Name that has a signing key associated with it such that\n * new IPNS record revisions can be created and signed for it.\n */\nexport class WritableName extends Name {\n  /**\n   * @param {PrivateKey} privKey\n   */\n  constructor (privKey) {\n    super(privKey.public)\n    /**\n     * @private\n     */\n    this._privKey = privKey\n  }\n\n  get key () {\n    return this._privKey\n  }\n}\n\n/**\n * Create a new name with associated signing key that can be used to create and\n * publish IPNS record revisions.\n *\n * **❗️Experimental** this API may not work, may change, and may be removed.\n */\nexport async function create () {\n  const privKey = await keys.generateKeyPair('Ed25519', 2048)\n  return new WritableName(privKey)\n}\n\n/**\n * Parses string name to readable name.\n *\n * **❗️Experimental** this API may not work, may change, and may be removed.\n *\n * @param {string} name The name to parse.\n */\nexport function parse (name) {\n  const keyCid = CID.parse(name, base36)\n  if (keyCid.code !== libp2pKeyCode) {\n    throw new Error(`invalid key, expected ${libp2pKeyCode} codec code but got ${keyCid.code}`)\n  }\n  const pubKey = keys.unmarshalPublicKey(Digest.decode(keyCid.multihash.bytes).bytes)\n  return new Name(pubKey)\n}\n\n/**\n * Create a name from an existing signing key (private key).\n *\n * **❗️Experimental** this API may not work, may change, and may be removed.\n *\n * @param {Uint8Array} key Binary representation of the signing key for the name.\n */\nexport async function from (key) {\n  const privKey = await keys.unmarshalPrivateKey(key)\n  return new WritableName(privKey)\n}\n\n/**\n * Create an initial version of the IPNS record for the passed name, set to the\n * passed value.\n *\n * **❗️Experimental** this API may not work, may change, and may be removed.\n *\n * @param {Name} name\n * @param {string} value\n */\nexport async function v0 (name, value) {\n  return new Revision(name, value, 0n, defaultValidity())\n}\n\n/**\n * Create a revision of the passed IPNS record by incrementing the sequence\n * number and changing the value.\n *\n * **❗️Experimental** this API may not work, may change, and may be removed.\n *\n * @param {Revision} revision\n * @param {string} value\n */\nexport async function increment (revision, value) {\n  const seqno = revision.sequence + 1n\n  return new Revision(revision.name, value, seqno, defaultValidity())\n}\n\n/**\n * A represetation of a IPNS record that may be initial or revised.\n */\nexport class Revision {\n  /**\n   * @param {Name} name\n   * @param {string} value\n   * @param {bigint} sequence\n   * @param {string} validity\n   */\n  constructor (name, value, sequence, validity) {\n    this._name = name\n    if (typeof value !== 'string') {\n      throw new Error('invalid value')\n    }\n    this._value = value\n    if (typeof sequence !== 'bigint') {\n      throw new Error('invalid sequence number')\n    }\n    this._sequence = sequence\n    if (typeof validity !== 'string') {\n      throw new Error('invalid validity')\n    }\n    // TODO: validate format\n    this._validity = validity\n  }\n\n  get name () {\n    return this._name\n  }\n\n  get value () {\n    return this._value\n  }\n\n  get sequence () {\n    return this._sequence\n  }\n\n  /**\n   * RFC3339 date string.\n   */\n  get validity () {\n    return this._validity\n  }\n\n  /**\n   * Note: if `revision.name` is a `WritableName` then signing key data will be\n   * lost. i.e. the private key is not encoded.\n   *\n   * @param {Revision} revision Revision to encode.\n   */\n  static encode (revision) {\n    return cbor.encode({\n      name: revision._name.toString(),\n      value: revision._value,\n      sequence: revision._sequence,\n      validity: revision._validity\n    })\n  }\n\n  /**\n   * @param {Uint8Array} bytes\n   */\n  static decode (bytes) {\n    const raw = cbor.decode(bytes)\n    const name = parse(raw.name)\n    return new Revision(name, raw.value, BigInt(raw.sequence), raw.validity)\n  }\n}\n\n/**\n * Publish a name revision to Web3.Storage.\n *\n * **❗️Experimental** this API may not work, may change, and may be removed.\n *\n * ⚠️ Name records are not _yet_ published to or updated from the IPFS network.\n * Working with name records simply updates the Web3.Storage cache of data.\n *\n * @param {import('./lib/interface.js').Service} service\n * @param {Revision} revision Revision of record to publish.\n * @param {SigningKey} key Private key to sign the record with.\n */\nexport async function publish (service, revision, key) {\n  const url = new URL(`name/${revision.name}`, service.endpoint)\n  const entry = await ipns.create(\n    // @ts-expect-error API expects a libp2p-crypto.PrivateKey but only uses SigningKey.sign().\n    key,\n    uint8ArrayFromString(revision.value),\n    revision.sequence,\n    new Date(revision.validity).getTime() - Date.now()\n  )\n  const res = await maybeHandleError(fetch(url.toString(), {\n    method: 'POST',\n    headers: headers(service.token),\n    body: uint8ArrayToString(ipns.marshal(entry), 'base64pad')\n  }))\n  await res.json()\n}\n\n/**\n * Resolve the current IPNS record revision for the passed name.\n *\n * **❗️Experimental** this API may not work, may change, and may be removed.\n *\n * @param {import('./lib/interface.js').PublicService} service\n * @param {Name} name The name to resolve.\n */\nexport async function resolve (service, name) {\n  const url = new URL(`name/${name}`, service.endpoint)\n  const res = await maybeHandleError(fetch(url.toString()))\n  const { record } = await res.json()\n  const entry = ipns.unmarshal(uint8ArrayFromString(record, 'base64pad'))\n  const keyCid = CID.decode(name.bytes)\n  const pubKey = keys.unmarshalPublicKey(Digest.decode(keyCid.multihash.bytes).bytes)\n\n  await ipns.validate(pubKey, entry)\n\n  return new Revision(\n    name,\n    uint8ArrayToString(entry.value),\n    entry.sequence,\n    uint8ArrayToString(entry.validity)\n  )\n}\n\n/**\n * @param {string} token\n * @returns {Record<string, string>}\n */\nfunction headers (token) {\n  if (!token) throw new Error('missing token')\n  return {\n    Authorization: `Bearer ${token}`,\n    'X-Client': 'web3.storage'\n  }\n}\n\n/**\n * @param {Promise<Response>} resPromise\n * @returns {Promise<Response>}\n */\nasync function maybeHandleError (resPromise) {\n  const res = await resPromise\n  if (res.ok) return res\n  const err = new Error(`unexpected status: ${res.status}`)\n  try {\n    Object.assign(err, await res.json())\n  } catch {}\n  throw err\n}\n"],"names":["Digest","identity","CID","base36","keys","cbor","ipns","uint8ArrayFromString","fetch","uint8ArrayToString"],"mappings":"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"}