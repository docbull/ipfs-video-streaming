'use strict';

var chai_js = require('aegir/utils/chai.js');
var all = require('it-all');
var key = require('interface-datastore/key');
var memory = require('../src/memory.js');
var fromString = require('uint8arrays/from-string');
var namespace = require('../src/namespace.js');
var interfaceDatastoreTests = require('interface-datastore-tests');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var all__default = /*#__PURE__*/_interopDefaultLegacy(all);

describe('NamespaceDatastore', () => {
  const prefixes = [
    'abc',
    ''
  ];
  prefixes.forEach(prefix => it(`basic '${ prefix }'`, async () => {
    const mStore = new memory.MemoryDatastore();
    const store = new namespace.NamespaceDatastore(mStore, new key.Key(prefix));
    const keys = [
      'foo',
      'foo/bar',
      'foo/bar/baz',
      'foo/barb',
      'foo/bar/bazb',
      'foo/bar/baz/barb'
    ].map(s => new key.Key(s));
    await Promise.all(keys.map(key => store.put(key, fromString.fromString(key.toString()))));
    const nResults = Promise.all(keys.map(key => store.get(key)));
    const mResults = Promise.all(keys.map(key$1 => mStore.get(new key.Key(prefix).child(key$1))));
    const results = await Promise.all([
      nResults,
      mResults
    ]);
    const mRes = await all__default["default"](mStore.query({}));
    const nRes = await all__default["default"](store.query({}));
    chai_js.expect(nRes).to.have.length(mRes.length);
    mRes.forEach((a, i) => {
      const kA = a.key;
      const kB = nRes[i].key;
      chai_js.expect(store.transform.invert(kA)).to.eql(kB);
      chai_js.expect(kA).to.eql(store.transform.convert(kB));
    });
    await store.close();
    chai_js.expect(results[0]).to.eql(results[1]);
  }));
  prefixes.forEach(prefix => {
    describe(`interface-datastore: '${ prefix }'`, () => {
      interfaceDatastoreTests.interfaceDatastoreTests({
        setup() {
          return new namespace.NamespaceDatastore(new memory.MemoryDatastore(), new key.Key(prefix));
        },
        async teardown() {
        }
      });
    });
  });
});
