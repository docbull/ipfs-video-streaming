'use strict';

var chai_js = require('aegir/utils/chai.js');
var all = require('it-all');
var key = require('interface-datastore/key');
var memory = require('../src/memory.js');
var mount = require('../src/mount.js');
var fromString = require('uint8arrays/from-string');
var interfaceDatastoreTests = require('interface-datastore-tests');
var keytransform = require('../src/keytransform.js');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var all__default = /*#__PURE__*/_interopDefaultLegacy(all);

const stripPrefixDatastore = (datastore, prefix) => {
  return new keytransform.KeyTransformDatastore(datastore, {
    convert: key$1 => {
      if (!prefix.isAncestorOf(key$1)) {
        throw new Error(`Expected prefix: (${ prefix.toString() }) in key: ${ key$1.toString() }`);
      }
      return key.Key.withNamespaces(key$1.namespaces().slice(prefix.namespaces().length));
    },
    invert: key$1 => key.Key.withNamespaces([
      ...prefix.namespaces(),
      ...key$1.namespaces()
    ])
  });
};
describe('MountDatastore', () => {
  it('put - no mount', async () => {
    const m = new mount.MountDatastore([]);
    try {
      await m.put(new key.Key('hello'), fromString.fromString('foo'));
      chai_js.assert(false, 'Failed to throw error on no mount');
    } catch (err) {
      chai_js.expect(err).to.be.an('Error');
    }
  });
  it('put - wrong mount', async () => {
    const m = new mount.MountDatastore([{
        datastore: stripPrefixDatastore(new memory.MemoryDatastore(), new key.Key('cool')),
        prefix: new key.Key('cool')
      }]);
    try {
      await m.put(new key.Key('/fail/hello'), fromString.fromString('foo'));
      chai_js.assert(false, 'Failed to throw error on wrong mount');
    } catch (err) {
      chai_js.expect(err).to.be.an('Error');
    }
  });
  it('put', async () => {
    const mds = new memory.MemoryDatastore();
    const m = new mount.MountDatastore([{
        datastore: stripPrefixDatastore(mds, new key.Key('cool')),
        prefix: new key.Key('cool')
      }]);
    const val = fromString.fromString('hello');
    await m.put(new key.Key('/cool/hello'), val);
    const res = await mds.get(new key.Key('/hello'));
    chai_js.expect(res).to.eql(val);
  });
  it('get', async () => {
    const mds = new memory.MemoryDatastore();
    const m = new mount.MountDatastore([{
        datastore: stripPrefixDatastore(mds, new key.Key('cool')),
        prefix: new key.Key('cool')
      }]);
    const val = fromString.fromString('hello');
    await mds.put(new key.Key('/hello'), val);
    const res = await m.get(new key.Key('/cool/hello'));
    chai_js.expect(res).to.eql(val);
  });
  it('has', async () => {
    const mds = new memory.MemoryDatastore();
    const m = new mount.MountDatastore([{
        datastore: stripPrefixDatastore(mds, new key.Key('cool')),
        prefix: new key.Key('cool')
      }]);
    const val = fromString.fromString('hello');
    await mds.put(new key.Key('/hello'), val);
    const exists = await m.has(new key.Key('/cool/hello'));
    chai_js.expect(exists).to.eql(true);
  });
  it('delete', async () => {
    const mds = new memory.MemoryDatastore();
    const m = new mount.MountDatastore([{
        datastore: stripPrefixDatastore(mds, new key.Key('cool')),
        prefix: new key.Key('cool')
      }]);
    const val = fromString.fromString('hello');
    await m.put(new key.Key('/cool/hello'), val);
    await m.delete(new key.Key('/cool/hello'));
    let exists = await m.has(new key.Key('/cool/hello'));
    chai_js.expect(exists).to.eql(false);
    exists = await mds.has(new key.Key('/hello'));
    chai_js.expect(exists).to.eql(false);
  });
  it('query simple', async () => {
    const mds = new memory.MemoryDatastore();
    const m = new mount.MountDatastore([{
        datastore: stripPrefixDatastore(mds, new key.Key('cool')),
        prefix: new key.Key('cool')
      }]);
    const val = fromString.fromString('hello');
    await m.put(new key.Key('/cool/hello'), val);
    const res = await all__default["default"](m.query({ prefix: '/cool' }));
    chai_js.expect(res).to.eql([{
        key: new key.Key('/cool/hello'),
        value: val
      }]);
  });
  describe('interface-datastore', () => {
    interfaceDatastoreTests.interfaceDatastoreTests({
      setup() {
        return new mount.MountDatastore([
          {
            prefix: new key.Key('/a'),
            datastore: new memory.MemoryDatastore()
          },
          {
            prefix: new key.Key('/z'),
            datastore: new memory.MemoryDatastore()
          },
          {
            prefix: new key.Key('/q'),
            datastore: new memory.MemoryDatastore()
          }
        ]);
      },
      teardown() {
      }
    });
  });
});
