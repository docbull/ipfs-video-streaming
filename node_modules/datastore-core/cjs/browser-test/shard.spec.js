'use strict';

var chai_js = require('aegir/utils/chai.js');
var shard = require('../src/shard.js');

describe('shard', () => {
  it('prefix', () => {
    chai_js.expect(new shard.Prefix(2).fun('hello')).to.eql('he');
    chai_js.expect(new shard.Prefix(2).fun('h')).to.eql('h_');
    chai_js.expect(new shard.Prefix(2).toString()).to.eql('/repo/flatfs/shard/v1/prefix/2');
  });
  it('suffix', () => {
    chai_js.expect(new shard.Suffix(2).fun('hello')).to.eql('lo');
    chai_js.expect(new shard.Suffix(2).fun('h')).to.eql('_h');
    chai_js.expect(new shard.Suffix(2).toString()).to.eql('/repo/flatfs/shard/v1/suffix/2');
  });
  it('next-to-last', () => {
    chai_js.expect(new shard.NextToLast(2).fun('hello')).to.eql('ll');
    chai_js.expect(new shard.NextToLast(3).fun('he')).to.eql('__h');
    chai_js.expect(new shard.NextToLast(2).toString()).to.eql('/repo/flatfs/shard/v1/next-to-last/2');
  });
});
describe('parsesShardFun', () => {
  it('errors', () => {
    const errors = [
      '',
      'shard/v1/next-to-last/2',
      '/repo/flatfs/shard/v2/next-to-last/2',
      '/repo/flatfs/shard/v1/other/2',
      '/repo/flatfs/shard/v1/next-to-last/'
    ];
    errors.forEach(input => {
      chai_js.expect(() => shard.parseShardFun(input)).to.throw();
    });
  });
  it('success', () => {
    const success = [
      'prefix',
      'suffix',
      'next-to-last'
    ];
    success.forEach(name => {
      const n = Math.floor(Math.random() * 100);
      chai_js.expect(shard.parseShardFun(`/repo/flatfs/shard/v1/${ name }/${ n }`).name).to.eql(name);
    });
  });
});
