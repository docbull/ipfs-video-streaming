'use strict';

var chai_js = require('aegir/utils/chai.js');
var utils = require('../src/utils.js');
var filter = require('it-filter');
var take = require('it-take');
var map = require('it-map');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var filter__default = /*#__PURE__*/_interopDefaultLegacy(filter);
var take__default = /*#__PURE__*/_interopDefaultLegacy(take);
var map__default = /*#__PURE__*/_interopDefaultLegacy(map);

describe('utils', () => {
  it('filter - sync', async () => {
    const data = [
      1,
      2,
      3,
      4
    ];
    const filterer = val => val % 2 === 0;
    const res = [];
    for await (const val of filter__default["default"](data, filterer)) {
      res.push(val);
    }
    chai_js.expect(res).to.be.eql([
      2,
      4
    ]);
  });
  it('filter - async', async () => {
    const data = [
      1,
      2,
      3,
      4
    ];
    const filterer = val => val % 2 === 0;
    const res = [];
    for await (const val of filter__default["default"](data, filterer)) {
      res.push(val);
    }
    chai_js.expect(res).to.be.eql([
      2,
      4
    ]);
  });
  it('sortAll', async () => {
    const data = [
      1,
      2,
      3,
      4
    ];
    const sorter = (a, b) => {
      if (a < b) {
        return 1;
      }
      if (a > b) {
        return -1;
      }
      return 0;
    };
    const res = [];
    for await (const val of utils.sortAll(data, sorter)) {
      res.push(val);
    }
    chai_js.expect(res).to.be.eql([
      4,
      3,
      2,
      1
    ]);
  });
  it('sortAll - fail', async () => {
    const data = [
      1,
      2,
      3,
      4
    ];
    const sorter = () => {
      throw new Error('fail');
    };
    const res = [];
    try {
      for await (const val of utils.sortAll(data, sorter)) {
        res.push(val);
      }
    } catch (err) {
      chai_js.expect(err.message).to.be.eql('fail');
      return;
    }
    throw new Error('expected error to be thrown');
  });
  it('should take n values from iterator', async () => {
    const data = [
      1,
      2,
      3,
      4
    ];
    const n = 3;
    const res = [];
    for await (const val of take__default["default"](data, n)) {
      res.push(val);
    }
    chai_js.expect(res).to.be.eql([
      1,
      2,
      3
    ]);
  });
  it('should take nothing from iterator', async () => {
    const data = [
      1,
      2,
      3,
      4
    ];
    const n = 0;
    for await (const _ of take__default["default"](data, n)) {
      throw new Error('took a value');
    }
  });
  it('should map iterator values', async () => {
    const data = [
      1,
      2,
      3,
      4
    ];
    const mapper = n => n * 2;
    const res = [];
    for await (const val of map__default["default"](data, mapper)) {
      res.push(val);
    }
    chai_js.expect(res).to.be.eql([
      2,
      4,
      6,
      8
    ]);
  });
  it('replaceStartWith', () => {
    chai_js.expect(utils.replaceStartWith('helloworld', 'hello')).to.eql('world');
    chai_js.expect(utils.replaceStartWith('helloworld', 'world')).to.eql('helloworld');
  });
});
