'use strict';

var chai_js = require('aegir/utils/chai.js');
var key = require('interface-datastore/key');
var memory = require('../src/memory.js');
var fromString = require('uint8arrays/from-string');
var toString = require('uint8arrays/to-string');
var shard = require('../src/shard.js');
var sharding = require('../src/sharding.js');
var interfaceDatastoreTests = require('interface-datastore-tests');
var shardReadme = require('../src/shard-readme.js');

describe('ShardingDatastore', () => {
  it('create', async () => {
    const ms = new memory.MemoryDatastore();
    const shard$1 = new shard.NextToLast(2);
    const store = new sharding.ShardingDatastore(ms, shard$1);
    await store.open();
    const res = await Promise.all([
      ms.get(new key.Key(shard.SHARDING_FN)),
      ms.get(new key.Key(shard.README_FN))
    ]);
    chai_js.expect(toString.toString(res[0])).to.eql(shard$1.toString() + '\n');
    chai_js.expect(toString.toString(res[1])).to.eql(shardReadme);
  });
  it('open - empty', () => {
    const ms = new memory.MemoryDatastore();
    const store = new sharding.ShardingDatastore(ms);
    return chai_js.expect(store.open()).to.eventually.be.rejected().with.property('code', 'ERR_DB_OPEN_FAILED');
  });
  it('open - existing', () => {
    const ms = new memory.MemoryDatastore();
    const shard$1 = new shard.NextToLast(2);
    const store = new sharding.ShardingDatastore(ms, shard$1);
    return chai_js.expect(store.open()).to.eventually.be.fulfilled();
  });
  it('basics', async () => {
    const ms = new memory.MemoryDatastore();
    const shard$1 = new shard.NextToLast(2);
    const store = new sharding.ShardingDatastore(ms, shard$1);
    await store.open();
    await store.put(new key.Key('hello'), fromString.fromString('test'));
    const res = await ms.get(new key.Key('ll').child(new key.Key('hello')));
    chai_js.expect(res).to.eql(fromString.fromString('test'));
  });
  describe('interface-datastore', () => {
    interfaceDatastoreTests.interfaceDatastoreTests({
      setup() {
        const shard$1 = new shard.NextToLast(2);
        return new sharding.ShardingDatastore(new memory.MemoryDatastore(), shard$1);
      },
      teardown() {
      }
    });
  });
});
