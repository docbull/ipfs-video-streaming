'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var pTryEach = require('p-try-each');
var index = require('./dir-view/index.js');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var pTryEach__default = /*#__PURE__*/_interopDefaultLegacy(pTryEach);

const INDEX_HTML_FILES = [
  'index.html',
  'index.htm',
  'index.shtml'
];
const findIndexFile = (ipfs, path) => {
  return pTryEach__default["default"](INDEX_HTML_FILES.map(file => {
    return async () => {
      const stats = await ipfs.files.stat(`${ path }/${ file }`);
      return {
        name: file,
        cid: stats.cid
      };
    };
  }));
};
const directory = async (ipfs, path, cid) => {
  try {
    const res = await findIndexFile(ipfs, path);
    return [{ Name: res.name }];
  } catch (err) {
    if (err.message.includes('does not exist')) {
      const result = await ipfs.dag.get(cid);
      return index.render(path, result.value.Links);
    }
    throw err;
  }
};
const cid = async (ipfs, path) => {
  const stats = await ipfs.files.stat(path);
  if (stats.type.includes('directory')) {
    const err = Object.assign(new Error('This dag node is a directory'), {
      cid: stats.cid,
      fileName: stats.fileName,
      dagDirType: stats.type
    });
    throw err;
  }
  return { cid: stats.cid };
};

exports.cid = cid;
exports.directory = directory;
