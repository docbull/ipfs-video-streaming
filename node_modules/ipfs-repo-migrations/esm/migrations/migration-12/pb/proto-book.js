import $protobuf from 'protobufjs/minimal.js';
const $Reader = $protobuf.Reader, $Writer = $protobuf.Writer, $util = $protobuf.util;
const $root = $protobuf.roots['default'] || ($protobuf.roots['default'] = {});
export const Protocols = $root.Protocols = (() => {
  function Protocols(p) {
    this.protocols = [];
    if (p)
      for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
        if (p[ks[i]] != null)
          this[ks[i]] = p[ks[i]];
  }
  Protocols.prototype.protocols = $util.emptyArray;
  Protocols.encode = function encode(m, w) {
    if (!w)
      w = $Writer.create();
    if (m.protocols != null && m.protocols.length) {
      for (var i = 0; i < m.protocols.length; ++i)
        w.uint32(10).string(m.protocols[i]);
    }
    return w;
  };
  Protocols.decode = function decode(r, l) {
    if (!(r instanceof $Reader))
      r = $Reader.create(r);
    var c = l === undefined ? r.len : r.pos + l, m = new $root.Protocols();
    while (r.pos < c) {
      var t = r.uint32();
      switch (t >>> 3) {
      case 1:
        if (!(m.protocols && m.protocols.length))
          m.protocols = [];
        m.protocols.push(r.string());
        break;
      default:
        r.skipType(t & 7);
        break;
      }
    }
    return m;
  };
  Protocols.fromObject = function fromObject(d) {
    if (d instanceof $root.Protocols)
      return d;
    var m = new $root.Protocols();
    if (d.protocols) {
      if (!Array.isArray(d.protocols))
        throw TypeError('.Protocols.protocols: array expected');
      m.protocols = [];
      for (var i = 0; i < d.protocols.length; ++i) {
        m.protocols[i] = String(d.protocols[i]);
      }
    }
    return m;
  };
  Protocols.toObject = function toObject(m, o) {
    if (!o)
      o = {};
    var d = {};
    if (o.arrays || o.defaults) {
      d.protocols = [];
    }
    if (m.protocols && m.protocols.length) {
      d.protocols = [];
      for (var j = 0; j < m.protocols.length; ++j) {
        d.protocols[j] = m.protocols[j];
      }
    }
    return d;
  };
  Protocols.prototype.toJSON = function toJSON() {
    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
  };
  return Protocols;
})();
export {
  $root as default
};