'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var Hapi = require('@hapi/hapi');
var Pino = require('hapi-pino');
var debug = require('debug');
var toMultiaddr = require('uri-to-multiaddr');
var index = require('./routes/index.js');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var Hapi__default = /*#__PURE__*/_interopDefaultLegacy(Hapi);
var Pino__default = /*#__PURE__*/_interopDefaultLegacy(Pino);
var debug__default = /*#__PURE__*/_interopDefaultLegacy(debug);
var toMultiaddr__default = /*#__PURE__*/_interopDefaultLegacy(toMultiaddr);

const LOG = 'ipfs:http-gateway';
const LOG_ERROR = 'ipfs:http-gateway:error';
function hapiInfoToMultiaddr(info) {
  let hostname = info.host;
  let uri = info.uri;
  if (hostname.includes(':') && !hostname.startsWith('[')) {
    hostname = `[${ hostname }]`;
    uri = uri.replace(`://${ info.host }`, `://${ hostname }`);
  }
  return toMultiaddr__default["default"](uri);
}
async function serverCreator(serverAddrs, createServer, ipfs) {
  serverAddrs = serverAddrs || [];
  serverAddrs = Array.isArray(serverAddrs) ? serverAddrs : [serverAddrs];
  const servers = [];
  for (const address of serverAddrs) {
    const addrParts = address.split('/');
    const server = await createServer(addrParts[2], addrParts[4], ipfs);
    await server.start();
    server.info.ma = hapiInfoToMultiaddr(server.info);
    servers.push(server);
  }
  return servers;
}
class HttpGateway {
  constructor(ipfs) {
    this._ipfs = ipfs;
    this._log = Object.assign(debug__default["default"](LOG), { error: debug__default["default"](LOG_ERROR) });
    this._gatewayServers = [];
  }
  async start() {
    this._log('starting');
    const ipfs = this._ipfs;
    const config = await ipfs.config.getAll();
    const addresses = config.Addresses || {
      Swarm: [],
      Gateway: []
    };
    const gatewayAddrs = addresses?.Gateway || [];
    this._gatewayServers = await serverCreator(gatewayAddrs, this._createGatewayServer, ipfs);
    this._log('started');
  }
  async _createGatewayServer(host, port, ipfs) {
    const server = Hapi__default["default"].server({
      host,
      port,
      routes: {
        cors: true,
        response: { emptyStatusCode: 200 }
      }
    });
    server.app.ipfs = ipfs;
    await server.register({
      plugin: Pino__default["default"],
      options: {
        prettyPrint: Boolean(debug__default["default"].enabled(LOG)),
        logEvents: [
          'onPostStart',
          'onPostStop',
          'response',
          'request-error'
        ],
        level: debug__default["default"].enabled(LOG) ? 'debug' : debug__default["default"].enabled(LOG_ERROR) ? 'error' : 'fatal'
      }
    });
    server.route(index.gateway);
    return server;
  }
  async stop() {
    this._log('stopping');
    const stopServers = servers => Promise.all((servers || []).map(s => s.stop()));
    await Promise.all([stopServers(this._gatewayServers)]);
    this._log('stopped');
  }
}

exports.HttpGateway = HttpGateway;
