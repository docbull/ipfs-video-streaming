'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var tiered = require('datastore-core/tiered');
var get = require('dlv');
var pubsubDatastore = require('./pubsub-datastore.js');
var offlineDatastore = require('./offline-datastore.js');
var dhtDatastore = require('./dht-datastore.js');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var get__default = /*#__PURE__*/_interopDefaultLegacy(get);

function createRouting({libp2p, repo, peerId, options}) {
  const ipnsStores = [];
  let pubsubDs;
  if (get__default["default"](options, 'EXPERIMENTAL.ipnsPubsub', false)) {
    const pubsub = libp2p.pubsub;
    const localDatastore = repo.datastore;
    pubsubDs = new pubsubDatastore.IpnsPubsubDatastore(pubsub, localDatastore, peerId);
    ipnsStores.push(pubsubDs);
  }
  if (!get__default["default"](options, 'offline', false) && libp2p._config && libp2p._config.dht && libp2p._config.dht.enabled) {
    ipnsStores.push(new dhtDatastore.DHTDatastore(libp2p._dht));
  }
  if (get__default["default"](options, 'offline', false) || ipnsStores.length === 0) {
    const offlineDatastore$1 = new offlineDatastore.OfflineDatastore(repo);
    ipnsStores.push(offlineDatastore$1);
  }
  return new tiered.TieredDatastore(ipnsStores);
}

exports.createRouting = createRouting;
