/**
 * @typedef {import('multiformats/cid').CID} CID
 * @typedef {import('ipfs-unixfs-importer').ImportResult} ImportResult
 * @typedef {import('multiformats/hashes/interface').MultihashHasher} MultihashHasher
 * @typedef {import('ipfs-core-utils/multihashes').Multihashes} Multihashes
 */
/**
 * @typedef {Object} Context
 * @property {import('ipfs-repo').IPFSRepo} repo
 * @property {import('../../types').Preload} preload
 * @property {Multihashes} hashers
 * @property {import('ipfs-core-types/src/root').ShardingOptions} [options]
 * @param {Context} context
 */
export function createAddAll({ repo, preload, hashers, options }: Context): (source: import("ipfs-core-types/src/utils").ImportCandidateStream, options?: (import("ipfs-core-types/src/root").AddAllOptions & import("ipfs-core-types/src/utils").AbortOptions) | undefined) => AsyncIterable<import("ipfs-core-types/src/root").AddResult>;
export type CID = import('multiformats/cid').CID;
export type ImportResult = import('ipfs-unixfs-importer').ImportResult;
export type MultihashHasher = import('multiformats/hashes/interface').MultihashHasher;
export type Multihashes = import('ipfs-core-utils/multihashes').Multihashes;
export type Context = {
    repo: import('ipfs-repo').IPFSRepo;
    preload: import('../../types').Preload;
    hashers: Multihashes;
    options?: import("ipfs-core-types/src/root").ShardingOptions | undefined;
};
//# sourceMappingURL=index.d.ts.map