'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var os = require('os');
var ipfsRepo = require('ipfs-repo');
var path = require('path');
var datastoreFs = require('datastore-fs');
var datastoreLevel = require('datastore-level');
var blockstoreDatastoreAdapter = require('blockstore-datastore-adapter');
var sharding = require('datastore-core/sharding');
var shard = require('datastore-core/shard');
var fs = require('ipfs-repo/locks/fs');
var mount = require('datastore-core/mount');
var key = require('interface-datastore/key');
var lruDatastore = require('./utils/lru-datastore.js');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var os__default = /*#__PURE__*/_interopDefaultLegacy(os);
var path__default = /*#__PURE__*/_interopDefaultLegacy(path);

function createRepo(print, codecs, options = {}) {
  const repoPath = options.path || path__default["default"].join(os__default["default"].homedir(), '.jsipfs');
  const peerStoreCacheSize = options.peerStoreCacheSize || 1024;
  let lastMigration;
  const onMigrationProgress = options.onMigrationProgress || function (version, percentComplete, message) {
    if (version !== lastMigration) {
      lastMigration = version;
      print(`Migrating repo from v${ version - 1 } to v${ version }`);
    }
    print(`${ percentComplete.toString().padStart(6, ' ') }% ${ message }`);
  };
  const defaultDatastore = new datastoreLevel.LevelDatastore(`${ repoPath }/datastore`);
  return ipfsRepo.createRepo(repoPath, codeOrName => codecs.getCodec(codeOrName), {
    root: new datastoreFs.FsDatastore(repoPath, { extension: '' }),
    blocks: new blockstoreDatastoreAdapter.BlockstoreDatastoreAdapter(new sharding.ShardingDatastore(new datastoreFs.FsDatastore(`${ repoPath }/blocks`, { extension: '.data' }), new shard.NextToLast(2))),
    datastore: new mount.MountDatastore([
      {
        prefix: new key.Key('/peers'),
        datastore: new lruDatastore.LRUDatastore(peerStoreCacheSize, defaultDatastore)
      },
      {
        prefix: new key.Key('/'),
        datastore: defaultDatastore
      }
    ]),
    keys: new datastoreFs.FsDatastore(`${ repoPath }/keys`),
    pins: new datastoreLevel.LevelDatastore(`${ repoPath }/pins`)
  }, {
    autoMigrate: options.autoMigrate != null ? options.autoMigrate : true,
    onMigrationProgress: onMigrationProgress,
    repoLock: fs.FSLock
  });
}

exports.createRepo = createRepo;
