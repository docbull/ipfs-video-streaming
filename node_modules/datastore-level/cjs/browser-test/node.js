'use strict';

var chai_js = require('aegir/utils/chai.js');
var path = require('path');
var key = require('interface-datastore/key');
var rimraf = require('rimraf');
var datastoreCore = require('datastore-core');
var cid = require('multiformats/cid');
var Digest = require('multiformats/hashes/digest');
var dagCbor = require('@ipld/dag-cbor');
var util = require('util');
var childProcess = require('child_process');
var leveljs = require('level');
var interfaceDatastoreTests = require('interface-datastore-tests');
var index = require('../src/index.js');
var tempdir = require('ipfs-utils/src/temp-dir.js');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

function _interopNamespace(e) {
  if (e && e.__esModule) return e;
  var n = Object.create(null);
  if (e) {
    Object.keys(e).forEach(function (k) {
      if (k !== 'default') {
        var d = Object.getOwnPropertyDescriptor(e, k);
        Object.defineProperty(n, k, d.get ? d : {
          enumerable: true,
          get: function () { return e[k]; }
        });
      }
    });
  }
  n["default"] = e;
  return Object.freeze(n);
}

var path__default = /*#__PURE__*/_interopDefaultLegacy(path);
var rimraf__default = /*#__PURE__*/_interopDefaultLegacy(rimraf);
var Digest__namespace = /*#__PURE__*/_interopNamespace(Digest);
var dagCbor__namespace = /*#__PURE__*/_interopNamespace(dagCbor);
var childProcess__default = /*#__PURE__*/_interopDefaultLegacy(childProcess);
var leveljs__default = /*#__PURE__*/_interopDefaultLegacy(leveljs);
var tempdir__default = /*#__PURE__*/_interopDefaultLegacy(tempdir);

describe('LevelDatastore', () => {
  describe('interface-datastore (leveldown)', () => {
    const dir = tempdir__default["default"]();
    interfaceDatastoreTests.interfaceDatastoreTests({
      setup: () => new index.LevelDatastore(dir, { db: leveljs__default["default"] }),
      teardown: () => util.promisify(rimraf__default["default"])(dir)
    });
  });
  describe('interface-datastore (mount(leveldown, leveldown, leveldown))', () => {
    const dirs = [
      tempdir__default["default"](),
      tempdir__default["default"](),
      tempdir__default["default"]()
    ];
    interfaceDatastoreTests.interfaceDatastoreTests({
      setup() {
        return new datastoreCore.MountDatastore([
          {
            prefix: new key.Key('/a'),
            datastore: new index.LevelDatastore(dirs[0], { db: leveljs__default["default"] })
          },
          {
            prefix: new key.Key('/q'),
            datastore: new index.LevelDatastore(dirs[1], { db: leveljs__default["default"] })
          },
          {
            prefix: new key.Key('/z'),
            datastore: new index.LevelDatastore(dirs[2], { db: leveljs__default["default"] })
          }
        ]);
      },
      teardown() {
        return Promise.all(dirs.map(dir => util.promisify(rimraf__default["default"])(dir)));
      }
    });
  });
  it.skip('interop with go', async () => {
    const store = new index.LevelDatastore(path__default["default"].join(__dirname, 'test-repo', 'datastore'), { db: leveljs__default["default"] });
    const cids = [];
    for await (const e of store.query({})) {
      cids.push(cid.CID.createV1(dagCbor__namespace.code, Digest__namespace.decode(e.key.uint8Array())));
    }
    chai_js.expect(cids[0].version).to.be.eql(0);
    chai_js.expect(cids).to.have.length(4);
  });
  it('should not leave iterators open and leak memory', done => {
    const cp = childProcess__default["default"].fork(path__default["default"].join(process.cwd(), '/test/fixtures/test-level-iterator-destroy'), { stdio: 'pipe' });
    let out = '';
    const {stdout, stderr} = cp;
    stdout && stdout.on('data', d => {
      out += d;
    });
    stderr && stderr.on('data', d => {
      out += d;
    });
    cp.on('exit', code => {
      chai_js.expect(code).to.equal(0);
      chai_js.expect(out).to.not.include('Assertion failed: (ended_)');
      done();
    });
  });
});
