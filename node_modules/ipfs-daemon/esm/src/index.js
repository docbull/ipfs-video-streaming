import debug from 'debug';
import set from 'just-safe-set';
import WebRTCStar from 'libp2p-webrtc-star';
import { create } from 'ipfs-core';
import { HttpApi } from 'ipfs-http-server';
import { HttpGateway } from 'ipfs-http-gateway';
import { createServer as gRPCServer } from 'ipfs-grpc-server';
import { isElectron } from 'ipfs-utils/src/env.js';
import prometheusClient from 'prom-client';
import Libp2p from 'libp2p';
const log = debug('ipfs:daemon');
export class Daemon {
  constructor(options = {}) {
    this._options = options;
    if (process.env.IPFS_MONITORING) {
      prometheusClient.collectDefaultMetrics();
    }
    this._ipfs = undefined;
  }
  async start() {
    log('starting');
    this._ipfs = await create(Object.assign({}, {
      start: true,
      libp2p: getLibp2p
    }, this._options));
    this._httpApi = new HttpApi(this._ipfs);
    await this._httpApi.start();
    this._httpGateway = new HttpGateway(this._ipfs);
    await this._httpGateway.start();
    const config = await this._ipfs.config.getAll();
    if (config.Addresses && config.Addresses.RPC) {
      this._grpcServer = await gRPCServer(this._ipfs);
    }
    log('started');
  }
  async stop() {
    log('stopping');
    await Promise.all([
      this._httpApi && this._httpApi.stop(),
      this._httpGateway && this._httpGateway.stop(),
      this._grpcServer && this._grpcServer.stop(),
      this._ipfs && this._ipfs.stop()
    ]);
    log('stopped');
  }
}
async function getLibp2p({libp2pOptions}) {
  let electronWebRTC;
  let wrtc;
  if (isElectron) {
    try {
      electronWebRTC = await import('electron-webrtc')();
    } catch (err) {
      log('failed to load optional electron-webrtc dependency');
    }
  }
  if (!electronWebRTC) {
    try {
      wrtc = (await import('wrtc')).default;
    } catch (err) {
      log('failed to load optional webrtc dependency');
    }
  }
  if (wrtc || electronWebRTC) {
    log(`Using ${ wrtc ? 'wrtc' : 'electron-webrtc' } for webrtc support`);
    set(libp2pOptions, 'config.transport.WebRTCStar.wrtc', wrtc || electronWebRTC);
    libp2pOptions.modules.transport.push(WebRTCStar);
  }
  return Libp2p.create(libp2pOptions);
}