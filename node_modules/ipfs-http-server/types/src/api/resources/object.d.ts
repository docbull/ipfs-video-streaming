export namespace newResource {
    namespace options {
        namespace validate {
            export namespace options_1 {
                const allowUnknown: boolean;
                const stripUnknown: boolean;
            }
            export { options_1 as options };
            export const query: any;
        }
    }
    /**
     * @param {import('../../types').Request} request
     * @param {import('@hapi/hapi').ResponseToolkit} h
     */
    function handler(request: import("@hapi/hapi").Request, h: import("@hapi/hapi").ResponseToolkit): Promise<import("@hapi/hapi").ResponseObject>;
    /**
     * @param {import('../../types').Request} request
     * @param {import('@hapi/hapi').ResponseToolkit} h
     */
    function handler(request: import("@hapi/hapi").Request, h: import("@hapi/hapi").ResponseToolkit): Promise<import("@hapi/hapi").ResponseObject>;
}
export namespace getResource {
    export namespace options_2 {
        export namespace validate_1 {
            export namespace options_3 {
                const allowUnknown_1: boolean;
                export { allowUnknown_1 as allowUnknown };
                const stripUnknown_1: boolean;
                export { stripUnknown_1 as stripUnknown };
            }
            export { options_3 as options };
            const query_1: any;
            export { query_1 as query };
        }
        export { validate_1 as validate };
    }
    export { options_2 as options };
    /**
     * @param {import('../../types').Request} request
     * @param {import('@hapi/hapi').ResponseToolkit} h
     */
    export function handler(request: import("@hapi/hapi").Request, h: import("@hapi/hapi").ResponseToolkit): Promise<import("@hapi/hapi").ResponseObject>;
    /**
     * @param {import('../../types').Request} request
     * @param {import('@hapi/hapi').ResponseToolkit} h
     */
    export function handler(request: import("@hapi/hapi").Request, h: import("@hapi/hapi").ResponseToolkit): Promise<import("@hapi/hapi").ResponseObject>;
}
export namespace putResource {
    export namespace options_4 {
        export namespace payload {
            const parse: boolean;
            const output: string;
        }
        export const pre: {
            assign: string;
            method: (request: import("@hapi/hapi").Request, _h: import("@hapi/hapi").ResponseToolkit) => Promise<{
                data: any;
            }>;
        }[];
        export namespace validate_2 {
            export namespace options_5 {
                const allowUnknown_2: boolean;
                export { allowUnknown_2 as allowUnknown };
                const stripUnknown_2: boolean;
                export { stripUnknown_2 as stripUnknown };
            }
            export { options_5 as options };
            const query_2: any;
            export { query_2 as query };
        }
        export { validate_2 as validate };
    }
    export { options_4 as options };
    /**
     * @param {import('../../types').Request} request
     * @param {import('@hapi/hapi').ResponseToolkit} h
     */
    export function handler(request: import("@hapi/hapi").Request, h: import("@hapi/hapi").ResponseToolkit): Promise<import("@hapi/hapi").ResponseObject>;
    /**
     * @param {import('../../types').Request} request
     * @param {import('@hapi/hapi').ResponseToolkit} h
     */
    export function handler(request: import("@hapi/hapi").Request, h: import("@hapi/hapi").ResponseToolkit): Promise<import("@hapi/hapi").ResponseObject>;
}
export namespace statResource {
    export namespace options_6 {
        export namespace validate_3 {
            export namespace options_7 {
                const allowUnknown_3: boolean;
                export { allowUnknown_3 as allowUnknown };
                const stripUnknown_3: boolean;
                export { stripUnknown_3 as stripUnknown };
            }
            export { options_7 as options };
            const query_3: any;
            export { query_3 as query };
        }
        export { validate_3 as validate };
    }
    export { options_6 as options };
    /**
     * @param {import('../../types').Request} request
     * @param {import('@hapi/hapi').ResponseToolkit} h
     */
    export function handler(request: import("@hapi/hapi").Request, h: import("@hapi/hapi").ResponseToolkit): Promise<import("@hapi/hapi").ResponseObject>;
    /**
     * @param {import('../../types').Request} request
     * @param {import('@hapi/hapi').ResponseToolkit} h
     */
    export function handler(request: import("@hapi/hapi").Request, h: import("@hapi/hapi").ResponseToolkit): Promise<import("@hapi/hapi").ResponseObject>;
}
export namespace dataResource {
    export namespace options_8 {
        export namespace validate_4 {
            export namespace options_9 {
                const allowUnknown_4: boolean;
                export { allowUnknown_4 as allowUnknown };
                const stripUnknown_4: boolean;
                export { stripUnknown_4 as stripUnknown };
            }
            export { options_9 as options };
            const query_4: any;
            export { query_4 as query };
        }
        export { validate_4 as validate };
    }
    export { options_8 as options };
    /**
     * @param {import('../../types').Request} request
     * @param {import('@hapi/hapi').ResponseToolkit} h
     */
    export function handler(request: import("@hapi/hapi").Request, h: import("@hapi/hapi").ResponseToolkit): Promise<import("@hapi/hapi").ResponseObject>;
    /**
     * @param {import('../../types').Request} request
     * @param {import('@hapi/hapi').ResponseToolkit} h
     */
    export function handler(request: import("@hapi/hapi").Request, h: import("@hapi/hapi").ResponseToolkit): Promise<import("@hapi/hapi").ResponseObject>;
}
export namespace linksResource {
    export namespace options_10 {
        export namespace validate_5 {
            export namespace options_11 {
                const allowUnknown_5: boolean;
                export { allowUnknown_5 as allowUnknown };
                const stripUnknown_5: boolean;
                export { stripUnknown_5 as stripUnknown };
            }
            export { options_11 as options };
            const query_5: any;
            export { query_5 as query };
        }
        export { validate_5 as validate };
    }
    export { options_10 as options };
    /**
     * @param {import('../../types').Request} request
     * @param {import('@hapi/hapi').ResponseToolkit} h
     */
    export function handler(request: import("@hapi/hapi").Request, h: import("@hapi/hapi").ResponseToolkit): Promise<import("@hapi/hapi").ResponseObject>;
    /**
     * @param {import('../../types').Request} request
     * @param {import('@hapi/hapi').ResponseToolkit} h
     */
    export function handler(request: import("@hapi/hapi").Request, h: import("@hapi/hapi").ResponseToolkit): Promise<import("@hapi/hapi").ResponseObject>;
}
export namespace patchAppendDataResource {
    export namespace options_12 {
        export namespace payload_1 {
            const parse_1: boolean;
            export { parse_1 as parse };
            const output_1: string;
            export { output_1 as output };
        }
        export { payload_1 as payload };
        const pre_1: {
            assign: string;
            method: (request: import("@hapi/hapi").Request, _h: import("@hapi/hapi").ResponseToolkit) => Promise<{
                data: any;
            }>;
        }[];
        export { pre_1 as pre };
        export namespace validate_6 {
            export namespace options_13 {
                const allowUnknown_6: boolean;
                export { allowUnknown_6 as allowUnknown };
                const stripUnknown_6: boolean;
                export { stripUnknown_6 as stripUnknown };
            }
            export { options_13 as options };
            const query_6: any;
            export { query_6 as query };
        }
        export { validate_6 as validate };
    }
    export { options_12 as options };
    /**
     * @param {import('../../types').Request} request
     * @param {import('@hapi/hapi').ResponseToolkit} h
     */
    export function handler(request: import("@hapi/hapi").Request, h: import("@hapi/hapi").ResponseToolkit): Promise<import("@hapi/hapi").ResponseObject>;
    /**
     * @param {import('../../types').Request} request
     * @param {import('@hapi/hapi').ResponseToolkit} h
     */
    export function handler(request: import("@hapi/hapi").Request, h: import("@hapi/hapi").ResponseToolkit): Promise<import("@hapi/hapi").ResponseObject>;
}
export namespace patchSetDataResource {
    export namespace options_14 {
        export namespace payload_2 {
            const parse_2: boolean;
            export { parse_2 as parse };
            const output_2: string;
            export { output_2 as output };
        }
        export { payload_2 as payload };
        const pre_2: {
            assign: string;
            method: (request: import("@hapi/hapi").Request, _h: import("@hapi/hapi").ResponseToolkit) => Promise<{
                data: any;
            }>;
        }[];
        export { pre_2 as pre };
        export namespace validate_7 {
            export namespace options_15 {
                const allowUnknown_7: boolean;
                export { allowUnknown_7 as allowUnknown };
                const stripUnknown_7: boolean;
                export { stripUnknown_7 as stripUnknown };
            }
            export { options_15 as options };
            const query_7: any;
            export { query_7 as query };
        }
        export { validate_7 as validate };
    }
    export { options_14 as options };
    /**
     * @param {import('../../types').Request} request
     * @param {import('@hapi/hapi').ResponseToolkit} h
     */
    export function handler(request: import("@hapi/hapi").Request, h: import("@hapi/hapi").ResponseToolkit): Promise<import("@hapi/hapi").ResponseObject>;
    /**
     * @param {import('../../types').Request} request
     * @param {import('@hapi/hapi').ResponseToolkit} h
     */
    export function handler(request: import("@hapi/hapi").Request, h: import("@hapi/hapi").ResponseToolkit): Promise<import("@hapi/hapi").ResponseObject>;
}
export namespace patchAddLinkResource {
    export namespace options_16 {
        export namespace validate_8 {
            export namespace options_17 {
                const allowUnknown_8: boolean;
                export { allowUnknown_8 as allowUnknown };
                const stripUnknown_8: boolean;
                export { stripUnknown_8 as stripUnknown };
            }
            export { options_17 as options };
            const query_8: any;
            export { query_8 as query };
        }
        export { validate_8 as validate };
    }
    export { options_16 as options };
    /**
     * @param {import('../../types').Request} request
     * @param {import('@hapi/hapi').ResponseToolkit} h
     */
    export function handler(request: import("@hapi/hapi").Request, h: import("@hapi/hapi").ResponseToolkit): Promise<import("@hapi/hapi").ResponseObject>;
    /**
     * @param {import('../../types').Request} request
     * @param {import('@hapi/hapi').ResponseToolkit} h
     */
    export function handler(request: import("@hapi/hapi").Request, h: import("@hapi/hapi").ResponseToolkit): Promise<import("@hapi/hapi").ResponseObject>;
}
export namespace patchRmLinkResource {
    export namespace options_18 {
        export namespace validate_9 {
            export namespace options_19 {
                const allowUnknown_9: boolean;
                export { allowUnknown_9 as allowUnknown };
                const stripUnknown_9: boolean;
                export { stripUnknown_9 as stripUnknown };
            }
            export { options_19 as options };
            const query_9: any;
            export { query_9 as query };
        }
        export { validate_9 as validate };
    }
    export { options_18 as options };
    /**
     * @param {import('../../types').Request} request
     * @param {import('@hapi/hapi').ResponseToolkit} h
     */
    export function handler(request: import("@hapi/hapi").Request, h: import("@hapi/hapi").ResponseToolkit): Promise<import("@hapi/hapi").ResponseObject>;
    /**
     * @param {import('../../types').Request} request
     * @param {import('@hapi/hapi').ResponseToolkit} h
     */
    export function handler(request: import("@hapi/hapi").Request, h: import("@hapi/hapi").ResponseToolkit): Promise<import("@hapi/hapi").ResponseObject>;
}
//# sourceMappingURL=object.d.ts.map