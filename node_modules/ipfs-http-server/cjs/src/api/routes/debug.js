'use strict';

var client = require('prom-client');
var Boom = require('@hapi/boom');
var debug = require('debug');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var client__default = /*#__PURE__*/_interopDefaultLegacy(client);
var Boom__default = /*#__PURE__*/_interopDefaultLegacy(Boom);
var debug__default = /*#__PURE__*/_interopDefaultLegacy(debug);

client__default["default"].register.clear();
const gauges = {};
var debugRoutes = [
  {
    method: 'GET',
    path: '/debug/metrics/prometheus',
    async handler(request, h) {
      if (!process.env.IPFS_MONITORING) {
        throw Boom__default["default"].notImplemented('Monitoring is disabled. Enable it by setting environment variable IPFS_MONITORING');
      }
      const {ipfs} = request.server.app;
      const metrics = ipfs.libp2p.metrics;
      if (metrics) {
        for (const [system, components] of metrics.getComponentMetrics().entries()) {
          for (const [component, componentMetrics] of components.entries()) {
            for (const [metricName, metricValue] of componentMetrics.entries()) {
              const name = `${ system }-${ component }-${ metricName }`.replace(/-/g, '_');
              if (!gauges[name]) {
                gauges[name] = new client__default["default"].Gauge({
                  name,
                  help: name
                });
              }
              gauges[name].set(metricValue);
            }
          }
        }
      }
      return h.response(await client__default["default"].register.metrics()).type(client__default["default"].register.contentType);
    }
  },
  {
    method: 'POST',
    path: '/debug/logs',
    async handler(request, h) {
      if (!process.env.IPFS_MONITORING) {
        throw Boom__default["default"].notImplemented('Monitoring is disabled. Enable it by setting environment variable IPFS_MONITORING');
      }
      if (!request.query.debug) {
        debug__default["default"].disable();
      } else {
        debug__default["default"].enable(request.query.debug);
      }
      return h.response();
    }
  }
];

module.exports = debugRoutes;
