'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var map = require('it-map');
var itPipe = require('it-pipe');
var streamResponse = require('../../utils/stream-response.js');
var joi = require('../../utils/joi.js');
var bitswap = require('./bitswap.js');
var repo = require('./repo.js');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var map__default = /*#__PURE__*/_interopDefaultLegacy(map);

const bwResource = {
  options: {
    validate: {
      options: {
        allowUnknown: true,
        stripUnknown: true
      },
      query: joi.object().keys({
        peer: joi.string(),
        proto: joi.string(),
        poll: joi.boolean().default(false),
        interval: joi.string().default('1s'),
        timeout: joi.timeout()
      })
    }
  },
  handler(request, h) {
    const {
      app: {signal},
      server: {
        app: {ipfs}
      },
      query: {peer, proto, poll, interval, timeout}
    } = request;
    return streamResponse.streamResponse(request, h, () => itPipe.pipe(ipfs.stats.bw({
      peer,
      proto,
      poll,
      interval,
      signal,
      timeout
    }), async function* (source) {
      yield* map__default["default"](source, stat => ({
        TotalIn: stat.totalIn.toString(),
        TotalOut: stat.totalOut.toString(),
        RateIn: stat.rateIn,
        RateOut: stat.rateOut
      }));
    }));
  }
};

exports.bitswapResource = bitswap.statResource;
exports.repoResource = repo.statResource;
exports.bwResource = bwResource;
