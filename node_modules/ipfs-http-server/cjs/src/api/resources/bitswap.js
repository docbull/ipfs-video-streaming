'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var joi = require('../../utils/joi.js');

const wantlistResource = {
  options: {
    validate: {
      options: {
        allowUnknown: true,
        stripUnknown: true
      },
      query: joi.object().keys({
        peer: joi.string(),
        cidBase: joi.string().default('base58btc'),
        timeout: joi.timeout()
      }).rename('cid-base', 'cidBase', {
        override: true,
        ignoreUndefined: true
      })
    }
  },
  async handler(request, h) {
    const {
      app: {signal},
      server: {
        app: {ipfs}
      },
      query: {peer, cidBase, timeout}
    } = request;
    let list;
    if (peer) {
      list = await ipfs.bitswap.wantlistForPeer(peer, {
        signal,
        timeout
      });
    } else {
      list = await ipfs.bitswap.wantlist({
        signal,
        timeout
      });
    }
    const base = await ipfs.bases.getBase(cidBase);
    return h.response({ Keys: list.map(cid => ({ '/': cid.toString(base.encoder) })) });
  }
};
const statResource = {
  options: {
    validate: {
      options: {
        allowUnknown: true,
        stripUnknown: true
      },
      query: joi.object().keys({
        cidBase: joi.string().default('base58btc'),
        timeout: joi.timeout()
      }).rename('cid-base', 'cidBase', {
        override: true,
        ignoreUndefined: true
      })
    }
  },
  async handler(request, h) {
    const {
      app: {signal},
      server: {
        app: {ipfs}
      },
      query: {cidBase, timeout}
    } = request;
    const stats = await ipfs.bitswap.stat({
      signal,
      timeout
    });
    const base = await ipfs.bases.getBase(cidBase);
    return h.response({
      ProvideBufLen: stats.provideBufLen,
      BlocksReceived: stats.blocksReceived.toString(),
      Wantlist: stats.wantlist.map(cid => ({ '/': cid.toString(base.encoder) })),
      Peers: stats.peers,
      DupBlksReceived: stats.dupBlksReceived.toString(),
      DupDataReceived: stats.dupDataReceived.toString(),
      DataReceived: stats.dataReceived.toString(),
      BlocksSent: stats.blocksSent.toString(),
      DataSent: stats.dataSent.toString()
    });
  }
};
const unwantResource = {
  options: {
    validate: {
      options: {
        allowUnknown: true,
        stripUnknown: true
      },
      query: joi.object().keys({
        cid: joi.cid().required(),
        cidBase: joi.string().default('base58btc'),
        timeout: joi.timeout()
      }).rename('arg', 'cid', {
        override: true,
        ignoreUndefined: true
      }).rename('cid-base', 'cidBase', {
        override: true,
        ignoreUndefined: true
      })
    }
  },
  async handler(request, h) {
    const {
      app: {signal},
      server: {
        app: {ipfs}
      },
      query: {cid, cidBase, timeout}
    } = request;
    await ipfs.bitswap.unwant(cid, {
      signal,
      timeout
    });
    const base = await ipfs.bases.getBase(cidBase);
    return h.response({ key: cid.toString(base.encoder) });
  }
};

exports.statResource = statResource;
exports.unwantResource = unwantResource;
exports.wantlistResource = wantlistResource;
