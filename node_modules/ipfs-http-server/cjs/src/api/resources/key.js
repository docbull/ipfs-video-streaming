'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var joi = require('../../utils/joi.js');

function toKeyInfo(key) {
  return {
    Name: key.name,
    Id: key.id
  };
}
const listResource = {
  options: {
    validate: {
      options: {
        allowUnknown: true,
        stripUnknown: true
      },
      query: joi.object().keys({ timeout: joi.timeout() })
    }
  },
  handler: async (request, h) => {
    const {
      app: {signal},
      server: {
        app: {ipfs}
      },
      query: {timeout}
    } = request;
    const keys = await ipfs.key.list({
      signal,
      timeout
    });
    return h.response({ Keys: keys.map(toKeyInfo) });
  }
};
const rmResource = {
  options: {
    validate: {
      options: {
        allowUnknown: true,
        stripUnknown: true
      },
      query: joi.object().keys({
        name: joi.string().required(),
        timeout: joi.timeout()
      }).rename('arg', 'name', {
        override: true,
        ignoreUndefined: true
      })
    }
  },
  handler: async (request, h) => {
    const {
      app: {signal},
      server: {
        app: {ipfs}
      },
      query: {name, timeout}
    } = request;
    const key = await ipfs.key.rm(name, {
      timeout,
      signal
    });
    return h.response({ Keys: [toKeyInfo(key)] });
  }
};
const renameResource = {
  options: {
    validate: {
      options: {
        allowUnknown: true,
        stripUnknown: true
      },
      query: joi.object().keys({
        arg: joi.array().single().length(2).required(),
        timeout: joi.timeout()
      })
    }
  },
  handler: async (request, h) => {
    const {
      app: {signal},
      server: {
        app: {ipfs}
      },
      query: {
        arg: [oldName, newName],
        timeout
      }
    } = request;
    const key = await ipfs.key.rename(oldName, newName, {
      signal,
      timeout
    });
    return h.response({
      Was: key.was,
      Now: key.now,
      Id: key.id,
      Overwrite: key.overwrite
    });
  }
};
const genResource = {
  options: {
    validate: {
      options: {
        allowUnknown: true,
        stripUnknown: true
      },
      query: joi.object().keys({
        name: joi.string().required(),
        type: joi.string().default('rsa'),
        size: joi.number().integer().default(2048),
        timeout: joi.timeout()
      }).rename('arg', 'name', {
        override: true,
        ignoreUndefined: true
      })
    }
  },
  handler: async (request, h) => {
    const {
      app: {signal},
      server: {
        app: {ipfs}
      },
      query: {name, type, size, timeout}
    } = request;
    const key = await ipfs.key.gen(name, {
      type,
      size,
      signal,
      timeout
    });
    return h.response(toKeyInfo(key));
  }
};
const importResource = {
  options: {
    validate: {
      options: {
        allowUnknown: true,
        stripUnknown: true
      },
      query: joi.object().keys({
        name: joi.string().required(),
        password: joi.string().required(),
        pem: joi.string().required(),
        timeout: joi.timeout()
      }).rename('arg', 'name', {
        override: true,
        ignoreUndefined: true
      })
    }
  },
  handler: async (request, h) => {
    const {
      app: {signal},
      server: {
        app: {ipfs}
      },
      query: {name, password, pem, timeout}
    } = request;
    const key = await ipfs.key.import(name, pem, password, {
      signal,
      timeout
    });
    return h.response(toKeyInfo(key));
  }
};

exports.genResource = genResource;
exports.importResource = importResource;
exports.listResource = listResource;
exports.renameResource = renameResource;
exports.rmResource = rmResource;
