'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var joi = require('../../../utils/joi.js');
var parseMtime = require('./utils/parse-mtime.js');

const mkdirResource = {
  options: {
    validate: {
      options: {
        allowUnknown: true,
        stripUnknown: true
      },
      query: joi.object().keys({
        arg: joi.string().trim().min(1).required().error(new Error('no path given')),
        mode: joi.string(),
        mtime: joi.number().integer(),
        mtimeNsecs: joi.number().integer().min(0),
        parents: joi.boolean().default(false),
        hashAlg: joi.string().default('sha2-256'),
        cidVersion: joi.number().integer().valid(0, 1).default(0),
        flush: joi.boolean().default(true),
        shardSplitThreshold: joi.number().integer().min(0).default(1000),
        timeout: joi.timeout()
      }).rename('p', 'parents', {
        override: true,
        ignoreUndefined: true
      }).rename('shard-split-threshold', 'shardSplitThreshold', {
        override: true,
        ignoreUndefined: true
      }).rename('hash-alg', 'hashAlg', {
        override: true,
        ignoreUndefined: true
      }).rename('hash', 'hashAlg', {
        override: true,
        ignoreUndefined: true
      }).rename('cid-version', 'cidVersion', {
        override: true,
        ignoreUndefined: true
      }).rename('mtime-nsecs', 'mtimeNsecs', {
        override: true,
        ignoreUndefined: true
      })
    }
  },
  async handler(request, h) {
    const {ipfs} = request.server.app;
    const {arg, mode, mtime, mtimeNsecs, parents, hashAlg, cidVersion, flush, shardSplitThreshold, timeout} = request.query;
    await ipfs.files.mkdir(arg, {
      mode,
      mtime: parseMtime.parseMtime(mtime, mtimeNsecs),
      parents,
      hashAlg,
      cidVersion,
      flush,
      shardSplitThreshold,
      signal: request.app.signal,
      timeout
    });
    return h.response();
  }
};

exports.mkdirResource = mkdirResource;
