'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var joi = require('../../../utils/joi.js');

const cpResource = {
  options: {
    validate: {
      options: {
        allowUnknown: true,
        stripUnknown: true
      },
      query: joi.object().keys({
        paths: joi.array().required().items(joi.string()).min(2),
        parents: joi.boolean().default(false),
        flush: joi.boolean().default(true),
        hashAlg: joi.string().default('sha2-256'),
        cidVersion: joi.number().integer().valid(0, 1).default(0),
        shardSplitThreshold: joi.number().integer().min(0).default(1000),
        timeout: joi.timeout()
      }).rename('shard-split-threshold', 'shardSplitThreshold', {
        override: true,
        ignoreUndefined: true
      }).rename('hash-alg', 'hashAlg', {
        override: true,
        ignoreUndefined: true
      }).rename('hash', 'hashAlg', {
        override: true,
        ignoreUndefined: true
      }).rename('cid-version', 'cidVersion', {
        override: true,
        ignoreUndefined: true
      }).rename('arg', 'paths', {
        override: true,
        ignoreUndefined: true
      })
    }
  },
  async handler(request, h) {
    const {
      app: {signal},
      server: {
        app: {ipfs}
      },
      query: {paths, parents, flush, hashAlg, cidVersion, shardSplitThreshold, timeout}
    } = request;
    const dest = paths.pop();
    await ipfs.files.cp(paths, dest, {
      parents,
      flush,
      hashAlg,
      cidVersion,
      shardSplitThreshold,
      signal,
      timeout
    });
    return h.response();
  }
};

exports.cpResource = cpResource;
