'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var joi = require('../../../utils/joi.js');
var all = require('it-all');
var map = require('it-map');
var itPipe = require('it-pipe');
var streamResponse = require('../../../utils/stream-response.js');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var all__default = /*#__PURE__*/_interopDefaultLegacy(all);
var map__default = /*#__PURE__*/_interopDefaultLegacy(map);

const mapEntry = (entry, base, long) => {
  const type = entry.type === 'file' ? 0 : 1;
  return {
    Name: entry.name,
    Type: long ? type : 0,
    Size: long ? entry.size || 0 : 0,
    Hash: entry.cid.toString(base.encoder),
    Mtime: entry.mtime ? entry.mtime.secs : undefined,
    MtimeNsecs: entry.mtime ? entry.mtime.nsecs : undefined,
    Mode: entry.mode != null ? entry.mode.toString(8).padStart(4, '0') : undefined
  };
};
const lsResource = {
  options: {
    validate: {
      options: {
        allowUnknown: true,
        stripUnknown: true
      },
      query: joi.object().keys({
        path: joi.string().default('/'),
        long: joi.boolean().default(false),
        cidBase: joi.string().default('base58btc'),
        stream: joi.boolean().default(false),
        timeout: joi.timeout()
      }).rename('arg', 'path', {
        override: true,
        ignoreUndefined: true
      })
    }
  },
  async handler(request, h) {
    const {
      app: {signal},
      server: {
        app: {ipfs}
      },
      query: {path, long, cidBase, stream, timeout}
    } = request;
    const base = await ipfs.bases.getBase(cidBase);
    if (stream) {
      return streamResponse.streamResponse(request, h, () => itPipe.pipe(ipfs.files.ls(path, {
        signal,
        timeout
      }), source => map__default["default"](source, entry => mapEntry(entry, base, long))));
    }
    const files = await all__default["default"](ipfs.files.ls(path, {
      signal,
      timeout
    }));
    return h.response({ Entries: files.map(entry => mapEntry(entry, base, long)) });
  }
};

exports.lsResource = lsResource;
