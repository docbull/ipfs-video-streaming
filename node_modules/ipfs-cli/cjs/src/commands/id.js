'use strict';

var parseDuration = require('parse-duration');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var parseDuration__default = /*#__PURE__*/_interopDefaultLegacy(parseDuration);

var id = {
  command: 'id [peerId]',
  describe: 'Shows IPFS Node ID info',
  builder: {
    peerid: {
      type: 'string',
      describe: 'Peer.ID of node to look up'
    },
    format: {
      alias: 'f',
      type: 'string',
      describe: 'Print Node ID info in the given format. Allowed tokens: <id> <aver> <pver> <pubkey> <addrs> <protocols>'
    },
    timeout: {
      type: 'string',
      coerce: parseDuration__default["default"]
    }
  },
  async handler({
    ctx: {ipfs, print},
    format,
    timeout,
    peerId
  }) {
    const id = await ipfs.id({
      timeout,
      peerId
    });
    if (format) {
      print(format.replace('<id>', id.id).replace('<aver>', id.agentVersion).replace('<pver>', id.protocolVersion).replace('<pubkey>', id.publicKey).replace('<addrs>', (id.addresses || []).map(addr => addr.toString()).join('\n')).replace('<protocols>', (id.protocols || []).map(protocol => protocol.toString()).join('\n')));
      return;
    }
    print(JSON.stringify(id, null, 2));
  }
};

module.exports = id;
