'use strict';

var parseDuration = require('parse-duration');
var toCidAndPath = require('ipfs-core-utils/to-cid-and-path');
var toString = require('uint8arrays/to-string');
var dagPB = require('@ipld/dag-pb');
var dagCBOR = require('@ipld/dag-cbor');
var dagJSON = require('@ipld/dag-json');
var raw = require('multiformats/codecs/raw');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

function _interopNamespace(e) {
  if (e && e.__esModule) return e;
  var n = Object.create(null);
  if (e) {
    Object.keys(e).forEach(function (k) {
      if (k !== 'default') {
        var d = Object.getOwnPropertyDescriptor(e, k);
        Object.defineProperty(n, k, d.get ? d : {
          enumerable: true,
          get: function () { return e[k]; }
        });
      }
    });
  }
  n["default"] = e;
  return Object.freeze(n);
}

var parseDuration__default = /*#__PURE__*/_interopDefaultLegacy(parseDuration);
var dagPB__namespace = /*#__PURE__*/_interopNamespace(dagPB);
var dagCBOR__namespace = /*#__PURE__*/_interopNamespace(dagCBOR);
var dagJSON__namespace = /*#__PURE__*/_interopNamespace(dagJSON);
var raw__namespace = /*#__PURE__*/_interopNamespace(raw);

const codecs = [
  dagCBOR__namespace,
  dagJSON__namespace,
  dagPB__namespace,
  raw__namespace
].reduce((m, codec) => {
  m[codec.name] = codec;
  return m;
}, {});
var dagGet = {
  command: 'get <cid path>',
  describe: 'Get a dag node or value from ipfs.',
  builder: {
    'local-resolve': {
      type: 'boolean',
      default: false
    },
    'output-codec': {
      describe: 'Codec to encode data in before displaying.',
      type: 'string',
      choices: [
        'dag-json',
        'dag-cbor',
        'dag-pb',
        'raw'
      ],
      default: 'dag-json'
    },
    'data-enc': {
      describe: 'String encoding to display raw node data in if using "raw" output-codec.',
      type: 'string',
      choices: [
        'base16',
        'base64',
        'base58btc'
      ]
    },
    timeout: {
      type: 'string',
      coerce: parseDuration__default["default"]
    }
  },
  async handler({
    ctx: {ipfs, print},
    cidpath,
    dataEnc,
    outputCodec,
    localResolve,
    timeout
  }) {
    const options = {
      localResolve,
      timeout
    };
    const {cid, path} = toCidAndPath.toCidAndPath(cidpath);
    let result;
    try {
      result = await ipfs.dag.get(cid, {
        ...options,
        path
      });
    } catch (err) {
      return print(`dag get failed: ${ err }`);
    }
    if (options.localResolve) {
      print('resolving path within the node only');
      print(`remainder path: ${ result.remainderPath || 'n/a' }\n`);
    }
    const node = result.value;
    if (outputCodec === 'raw') {
      if (!(node instanceof Uint8Array)) {
        print('dag get cannot print a non-bytes node as "raw"');
        return;
      }
      if (dataEnc) {
        print(toString.toString(node, dataEnc), false);
      } else {
        print.write(node);
      }
    } else {
      const codec = codecs[outputCodec];
      if (!codec) {
        print(`unsupported codec "${ outputCodec }"`);
        return;
      }
      const output = codec.encode(node);
      print(output, false);
    }
  }
};

module.exports = dagGet;
