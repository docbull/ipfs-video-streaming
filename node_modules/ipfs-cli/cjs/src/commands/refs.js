'use strict';

var parseDuration = require('parse-duration');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var parseDuration__default = /*#__PURE__*/_interopDefaultLegacy(parseDuration);

var refs = {
  command: 'refs <key> [keys..]',
  describe: 'List links (references) from an object',
  builder: {
    recursive: {
      alias: 'r',
      desc: 'Recursively list links of child nodes.',
      type: 'boolean',
      default: false
    },
    format: {
      desc: 'Output edges with given format. Available tokens: <src> <dst> <linkname>.',
      type: 'string',
      default: '<dst>'
    },
    edges: {
      alias: 'e',
      desc: 'Output edge format: `<from> -> <to>`',
      type: 'boolean',
      default: false
    },
    unique: {
      alias: 'u',
      desc: 'Omit duplicate refs from output.',
      type: 'boolean',
      default: false
    },
    'max-depth': {
      desc: 'Only for recursive refs, limits fetch and listing to the given depth.',
      type: 'number'
    },
    timeout: {
      type: 'string',
      coerce: parseDuration__default["default"]
    }
  },
  async handler({
    ctx: {ipfs, print},
    key,
    keys,
    recursive,
    format,
    edges,
    unique,
    maxDepth,
    timeout
  }) {
    if (maxDepth === 0) {
      return;
    }
    const k = [key].concat(keys);
    for await (const {err, ref} of ipfs.refs(k, {
        recursive,
        format,
        edges,
        unique,
        maxDepth,
        timeout
      })) {
      if (err) {
        print(err.toString(), true, true);
      } else {
        print(ref);
      }
    }
  }
};

module.exports = refs;
