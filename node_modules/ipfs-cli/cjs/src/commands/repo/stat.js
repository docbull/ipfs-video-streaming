'use strict';

var prettyBytes = require('pretty-bytes');
var parseDuration = require('parse-duration');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var prettyBytes__default = /*#__PURE__*/_interopDefaultLegacy(prettyBytes);
var parseDuration__default = /*#__PURE__*/_interopDefaultLegacy(parseDuration);

var repoStats = {
  command: 'stat',
  describe: 'Get stats for the currently used repo',
  builder: {
    human: {
      type: 'boolean',
      alias: 'H',
      default: false
    },
    sizeOnly: {
      type: 'boolean',
      alias: 's',
      default: false
    },
    timeout: {
      type: 'string',
      coerce: parseDuration__default["default"]
    }
  },
  async handler({
    ctx: {ipfs, print},
    human,
    sizeOnly,
    timeout
  }) {
    const stats = await ipfs.repo.stat({ timeout });
    const output = { ...stats };
    if (human) {
      output.numObjects = Number(stats.numObjects);
      output.repoSize = prettyBytes__default["default"](Number(stats.repoSize)).toUpperCase();
      output.storageMax = prettyBytes__default["default"](Number(stats.storageMax)).toUpperCase();
    }
    if (sizeOnly) {
      print(`RepoSize:   ${ output.repoSize }
StorageMax: ${ output.storageMax }`);
    } else {
      print(`NumObjects: ${ output.numObjects }
RepoSize:   ${ output.repoSize }
StorageMax: ${ output.storageMax }
RepoPath:   ${ output.repoPath }
Version:    ${ output.version }`);
    }
  }
};

module.exports = repoStats;
