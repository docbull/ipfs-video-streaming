'use strict';

var os = require('os');
var parseDuration = require('parse-duration');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var os__default = /*#__PURE__*/_interopDefaultLegacy(os);
var parseDuration__default = /*#__PURE__*/_interopDefaultLegacy(parseDuration);

var version = {
  command: 'version',
  describe: 'Shows IPFS version information',
  builder: {
    number: {
      alias: 'n',
      type: 'boolean',
      default: false,
      describe: 'Print only the version number'
    },
    commit: {
      type: 'boolean',
      default: false,
      describe: 'Include the version\'s commit hash'
    },
    repo: {
      type: 'boolean',
      default: false,
      describe: 'Print only the repo\'s version number'
    },
    all: {
      type: 'boolean',
      default: false,
      describe: 'Print everything we have'
    },
    timeout: {
      type: 'string',
      coerce: parseDuration__default["default"]
    }
  },
  async handler({
    ctx: {print, ipfs},
    all,
    commit,
    repo,
    number,
    timeout
  }) {
    const data = await ipfs.version({ timeout });
    const withCommit = all || commit;
    const parsedVersion = `${ data.version }${ withCommit && data.commit ? `-${ data.commit }` : '' }`;
    if (repo) {
      print(data.repo);
    } else if (number) {
      print(parsedVersion);
    } else if (all) {
      print(`js-ipfs version: ${ parsedVersion }`);
      print(`interface-ipfs-core version: ${ data['interface-ipfs-core'] }`);
      print(`ipfs-http-client version: ${ data['ipfs-http-client'] }`);
      print(`Repo version: ${ data.repo }`);
      print(`System version: ${ os__default["default"].arch() }/${ os__default["default"].platform() }`);
      print(`Node.js version: ${ process.version }`);
      if (data.commit) {
        print(`Commit: ${ data.commit }`);
      }
    } else {
      print(`js-ipfs version: ${ parsedVersion }`);
    }
  }
};

module.exports = version;
