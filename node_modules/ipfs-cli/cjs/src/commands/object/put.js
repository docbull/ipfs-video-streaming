'use strict';

var concat = require('it-concat');
var dagPB = require('@ipld/dag-pb');
var parseDuration = require('parse-duration');
var fromString = require('uint8arrays/from-string');
var toString = require('uint8arrays/to-string');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

function _interopNamespace(e) {
  if (e && e.__esModule) return e;
  var n = Object.create(null);
  if (e) {
    Object.keys(e).forEach(function (k) {
      if (k !== 'default') {
        var d = Object.getOwnPropertyDescriptor(e, k);
        Object.defineProperty(n, k, d.get ? d : {
          enumerable: true,
          get: function () { return e[k]; }
        });
      }
    });
  }
  n["default"] = e;
  return Object.freeze(n);
}

var concat__default = /*#__PURE__*/_interopDefaultLegacy(concat);
var dagPB__namespace = /*#__PURE__*/_interopNamespace(dagPB);
var parseDuration__default = /*#__PURE__*/_interopDefaultLegacy(parseDuration);

var objectPut = {
  command: 'put [data]',
  describe: 'Stores input as a DAG object, outputs its key',
  builder: {
    'input-enc': {
      type: 'string',
      choices: [
        'json',
        'protobuf'
      ],
      default: 'json'
    },
    'cid-base': {
      describe: 'Number base to display CIDs in',
      type: 'string',
      default: 'base58btc'
    },
    timeout: {
      type: 'string',
      coerce: parseDuration__default["default"]
    }
  },
  async handler({
    ctx: {ipfs, print, getStdin},
    data,
    inputEnc,
    cidBase,
    timeout
  }) {
    let buf;
    if (data) {
      buf = fromString.fromString(data);
    } else {
      buf = (await concat__default["default"](getStdin(), { type: 'buffer' })).slice();
    }
    let node;
    if (inputEnc === 'protobuf') {
      node = dagPB__namespace.decode(buf);
    } else {
      node = JSON.parse(toString.toString(buf));
    }
    const base = await ipfs.bases.getBase(cidBase);
    const cid = await ipfs.object.put(node, { timeout });
    print(`added ${ cid.toString(base.encoder) }`);
  }
};

module.exports = objectPut;
