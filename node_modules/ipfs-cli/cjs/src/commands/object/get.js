'use strict';

var dagPB = require('@ipld/dag-pb');
var parseDuration = require('parse-duration');
var toString = require('uint8arrays/to-string');
var utils = require('../../utils.js');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

function _interopNamespace(e) {
  if (e && e.__esModule) return e;
  var n = Object.create(null);
  if (e) {
    Object.keys(e).forEach(function (k) {
      if (k !== 'default') {
        var d = Object.getOwnPropertyDescriptor(e, k);
        Object.defineProperty(n, k, d.get ? d : {
          enumerable: true,
          get: function () { return e[k]; }
        });
      }
    });
  }
  n["default"] = e;
  return Object.freeze(n);
}

var dagPB__namespace = /*#__PURE__*/_interopNamespace(dagPB);
var parseDuration__default = /*#__PURE__*/_interopDefaultLegacy(parseDuration);

var objectGet = {
  command: 'get <key>',
  describe: 'Get and serialize the DAG node named by <key>',
  builder: {
    key: {
      type: 'string',
      coerce: utils.coerceCID
    },
    'data-encoding': {
      type: 'string',
      default: 'base64'
    },
    'cid-base': {
      describe: 'Number base to display CIDs in. Note: specifying a CID base for v0 CIDs will have no effect.',
      type: 'string',
      default: 'base58btc'
    },
    timeout: {
      type: 'string',
      coerce: parseDuration__default["default"]
    }
  },
  async handler({
    ctx: {ipfs, print},
    key,
    dataEncoding,
    cidBase,
    timeout
  }) {
    const node = await ipfs.object.get(key, { timeout });
    let encoding;
    if (dataEncoding === 'base64') {
      encoding = 'base64pad';
    }
    if (dataEncoding === 'text') {
      encoding = 'ascii';
    }
    if (dataEncoding === 'hex') {
      encoding = 'base16';
    }
    const buf = dagPB__namespace.encode(node);
    const base = await ipfs.bases.getBase(cidBase);
    const answer = {
      Data: node.Data ? toString.toString(node.Data, encoding) : '',
      Hash: key.toString(base.encoder),
      Size: buf.length,
      Links: node.Links.map(l => {
        return {
          Name: utils.stripControlCharacters(l.Name),
          Size: l.Tsize,
          Hash: l.Hash.toString(base.encoder)
        };
      })
    };
    print(JSON.stringify(answer));
  }
};

module.exports = objectGet;
