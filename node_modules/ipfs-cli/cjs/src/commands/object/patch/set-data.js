'use strict';

var fs = require('fs');
var concat = require('it-concat');
var parseDuration = require('parse-duration');
var utils = require('../../../utils.js');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var fs__default = /*#__PURE__*/_interopDefaultLegacy(fs);
var concat__default = /*#__PURE__*/_interopDefaultLegacy(concat);
var parseDuration__default = /*#__PURE__*/_interopDefaultLegacy(parseDuration);

var objectPatchSetData = {
  command: 'set-data <root> [data]',
  describe: 'Set data field of an ipfs object',
  builder: {
    root: {
      type: 'string',
      coerce: utils.coerceCID
    },
    'cid-base': {
      describe: 'Number base to display CIDs in. Note: specifying a CID base for v0 CIDs will have no effect.',
      type: 'string',
      default: 'base58btc'
    },
    timeout: {
      type: 'string',
      coerce: parseDuration__default["default"]
    }
  },
  async handler({
    ctx: {ipfs, print, getStdin},
    root,
    data,
    cidBase,
    timeout
  }) {
    let buf;
    if (data) {
      buf = fs__default["default"].readFileSync(data);
    } else {
      buf = (await concat__default["default"](getStdin(), { type: 'buffer' })).slice();
    }
    const cid = await ipfs.object.patch.setData(root, buf, { timeout });
    const base = await ipfs.bases.getBase(cidBase);
    print(cid.toString(base.encoder));
  }
};

module.exports = objectPatchSetData;
