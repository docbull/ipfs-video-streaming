'use strict';

var dagPB = require('@ipld/dag-pb');
var parseDuration = require('parse-duration');
var utils = require('../../../utils.js');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

function _interopNamespace(e) {
  if (e && e.__esModule) return e;
  var n = Object.create(null);
  if (e) {
    Object.keys(e).forEach(function (k) {
      if (k !== 'default') {
        var d = Object.getOwnPropertyDescriptor(e, k);
        Object.defineProperty(n, k, d.get ? d : {
          enumerable: true,
          get: function () { return e[k]; }
        });
      }
    });
  }
  n["default"] = e;
  return Object.freeze(n);
}

var dagPB__namespace = /*#__PURE__*/_interopNamespace(dagPB);
var parseDuration__default = /*#__PURE__*/_interopDefaultLegacy(parseDuration);

var objectPatchAddLink = {
  command: 'add-link <root> <name> <ref>',
  describe: 'Add a link to a given object',
  builder: {
    root: {
      type: 'string',
      coerce: utils.coerceCID
    },
    ref: {
      type: 'string',
      coerce: utils.coerceCID
    },
    'cid-base': {
      describe: 'Number base to display CIDs in. Note: specifying a CID base for v0 CIDs will have no effect.',
      type: 'string',
      default: 'base58btc'
    },
    timeout: {
      type: 'string',
      coerce: parseDuration__default["default"]
    }
  },
  async handler({
    ctx: {ipfs, print},
    root,
    name,
    ref,
    cidBase,
    timeout
  }) {
    const nodeA = await ipfs.object.get(ref, { timeout });
    const block = dagPB__namespace.encode(nodeA);
    const cid = await ipfs.object.patch.addLink(root, {
      Name: name,
      Hash: ref,
      Tsize: block.length
    }, { timeout });
    const base = await ipfs.bases.getBase(cidBase);
    print(cid.toString(base.encoder));
  }
};

module.exports = objectPatchAddLink;
