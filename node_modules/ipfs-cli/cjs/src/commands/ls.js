'use strict';

var utils = require('../utils.js');
var formatMode = require('ipfs-core-utils/files/format-mode');
var formatMtime = require('ipfs-core-utils/files/format-mtime');
var parseDuration = require('parse-duration');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var parseDuration__default = /*#__PURE__*/_interopDefaultLegacy(parseDuration);

var ls = {
  command: 'ls <key>',
  describe: 'List files for the given directory',
  builder: {
    v: {
      alias: 'headers',
      desc: 'Print table headers (Hash, Size, Name).',
      type: 'boolean',
      default: false
    },
    'cid-base': {
      describe: 'Number base to display CIDs in.',
      type: 'string',
      default: 'base58btc'
    },
    timeout: {
      type: 'string',
      coerce: parseDuration__default["default"]
    }
  },
  async handler({
    ctx: {ipfs, print},
    key,
    headers,
    cidBase,
    timeout
  }) {
    key = key.replace(/\/(\/+)/g, '/');
    if (key.endsWith('/')) {
      key = key.replace(/(\/+)$/, '');
    }
    let pathParts = key.split('/');
    if (key.startsWith('/ipfs/')) {
      pathParts = pathParts.slice(2);
    }
    let first = true;
    let maxWidths = [];
    const getMaxWidths = (...args) => {
      maxWidths = args.map((v, i) => Math.max(maxWidths[i] || 0, v.length));
      return maxWidths;
    };
    const printLink = (mode, mtime, cid, size, name, depth = 0) => {
      name = utils.stripControlCharacters(name);
      const widths = getMaxWidths(mode, mtime, cid, size, name);
      const padding = Math.max(depth - pathParts.length, 0);
      print(utils.rightpad(mode, widths[0] + 1) + utils.rightpad(mtime, widths[1] + 1) + utils.rightpad(cid, widths[2] + 1) + utils.rightpad(size, widths[3] + 1) + '  '.repeat(padding) + name);
    };
    const base = await ipfs.bases.getBase(cidBase);
    for await (const link of ipfs.ls(key, { timeout })) {
      const mode = link.mode != null ? formatMode.formatMode(link.mode, link.type === 'dir') : '';
      const mtime = link.mtime != null ? formatMtime.formatMtime(link.mtime) : '-';
      const cid = link.cid.toString(base.encoder);
      const size = link.size ? String(link.size) : '-';
      const name = utils.stripControlCharacters(link.type === 'dir' ? `${ link.name || '' }/` : link.name);
      if (first) {
        first = false;
        if (headers) {
          getMaxWidths(mode, mtime, cid, size, name);
          printLink('Mode', 'Mtime', 'Hash', 'Size', 'Name');
        }
      }
      printLink(mode, mtime, cid, size, name);
    }
  }
};

module.exports = ls;
