'use strict';

var fs = require('fs');
var concat = require('it-concat');
var parseDuration = require('parse-duration');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var fs__default = /*#__PURE__*/_interopDefaultLegacy(fs);
var concat__default = /*#__PURE__*/_interopDefaultLegacy(concat);
var parseDuration__default = /*#__PURE__*/_interopDefaultLegacy(parseDuration);

var blockPut = {
  command: 'put [block]',
  describe: 'Stores input as an IPFS block',
  builder: {
    format: {
      alias: 'f',
      describe: 'cid format for blocks to be created with.',
      default: 'dag-pb'
    },
    mhtype: {
      describe: 'multihash hash function',
      default: 'sha2-256'
    },
    mhlen: {
      describe: 'multihash hash length',
      default: undefined
    },
    version: {
      describe: 'cid version',
      type: 'number',
      default: 0
    },
    'cid-base': {
      describe: 'Number base to display CIDs in.',
      type: 'string',
      default: 'base58btc'
    },
    pin: {
      describe: 'Pin this block recursively',
      type: 'boolean',
      default: false
    },
    timeout: {
      type: 'string',
      coerce: parseDuration__default["default"]
    }
  },
  async handler({
    ctx: {ipfs, print, getStdin},
    block,
    timeout,
    format,
    mhtype,
    mhlen,
    version,
    cidBase,
    pin
  }) {
    let data;
    if (block) {
      data = fs__default["default"].readFileSync(block);
    } else {
      data = (await concat__default["default"](getStdin(), { type: 'buffer' })).slice();
    }
    const cid = await ipfs.block.put(data, {
      timeout,
      format,
      mhtype,
      version,
      pin
    });
    const base = await ipfs.bases.getBase(cidBase);
    print(cid.toString(base.encoder));
  }
};

module.exports = blockPut;
