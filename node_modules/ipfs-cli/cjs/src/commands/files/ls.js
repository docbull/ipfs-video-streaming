'use strict';

var utils = require('../../utils.js');
var formatMode = require('ipfs-core-utils/files/format-mode');
var formatMtime = require('ipfs-core-utils/files/format-mtime');
var parseDuration = require('parse-duration');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var parseDuration__default = /*#__PURE__*/_interopDefaultLegacy(parseDuration);

var filesLs = {
  command: 'ls [path]',
  describe: 'List mfs directories',
  builder: {
    long: {
      alias: 'l',
      type: 'boolean',
      default: false,
      coerce: utils.asBoolean,
      describe: 'Use long listing format.'
    },
    'cid-base': {
      describe: 'CID base to use.',
      default: 'base58btc'
    },
    timeout: {
      type: 'string',
      coerce: parseDuration__default["default"]
    }
  },
  async handler({
    ctx: {ipfs, print},
    path,
    long,
    cidBase,
    timeout
  }) {
    const base = await ipfs.bases.getBase(cidBase);
    const printListing = file => {
      const name = utils.stripControlCharacters(file.name);
      if (long) {
        print(`${ file.mode ? formatMode.formatMode(file.mode, file.type === 'directory') : '' }\t${ file.mtime ? formatMtime.formatMtime(file.mtime) : '' }\t${ name }\t${ file.cid.toString(base.encoder) }\t${ file.size }`);
      } else {
        print(name);
      }
    };
    for await (const file of ipfs.files.ls(path || '/', { timeout })) {
      printListing(file);
    }
  }
};

module.exports = filesLs;
