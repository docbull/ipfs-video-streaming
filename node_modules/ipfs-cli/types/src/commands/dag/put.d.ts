declare namespace _default {
    const command: string;
    const describe: string;
    const builder: {
        data: {
            type: string;
        };
        'store-codec': {
            type: string;
            default: string;
            describe: string;
            choices: string[];
        };
        'input-codec': {
            type: string;
            default: string;
            describe: string;
            choices: string[];
        };
        pin: {
            type: string;
            default: boolean;
            describe: string;
        };
        'hash-alg': {
            type: string;
            alias: string;
            default: string;
            describe: string;
        };
        'cid-version': {
            type: string;
            describe: string;
            default: number;
        };
        'cid-base': {
            describe: string;
            type: string;
            default: string;
        };
        preload: {
            type: string;
            default: boolean;
            describe: string;
        };
        'only-hash': {
            type: string;
            default: boolean;
            describe: string;
        };
        timeout: {
            type: string;
            coerce: ((input: string, format?: import("parse-duration").Units | undefined) => number) & {
                [key: string]: number;
            };
        };
    };
    /**
     * @param {object} argv
     * @param {import('../../types').Context} argv.ctx
     * @param {string} argv.data
     * @param {'dag-cbor' | 'dag-json' | 'dag-pb' | 'raw'} argv.inputCodec
     * @param {'dag-cbor' | 'dag-json' | 'dag-pb' | 'raw'} argv.storeCodec
     * @param {import('multiformats/cid').CIDVersion} argv.cidVersion
     * @param {boolean} argv.pin
     * @param {string} argv.hashAlg
     * @param {string} argv.cidBase
     * @param {boolean} argv.preload
     * @param {boolean} argv.onlyHash
     * @param {number} argv.timeout
     */
    function handler({ ctx: { ipfs, print, getStdin }, data, inputCodec, storeCodec, pin, hashAlg, cidVersion, cidBase, preload, onlyHash, timeout }: {
        ctx: import("../../types").Context;
        data: string;
        inputCodec: "raw" | "dag-pb" | "dag-cbor" | "dag-json";
        storeCodec: "raw" | "dag-pb" | "dag-cbor" | "dag-json";
        cidVersion: import("multiformats/cid").CIDVersion;
        pin: boolean;
        hashAlg: string;
        cidBase: string;
        preload: boolean;
        onlyHash: boolean;
        timeout: number;
    }): Promise<void>;
    /**
     * @param {object} argv
     * @param {import('../../types').Context} argv.ctx
     * @param {string} argv.data
     * @param {'dag-cbor' | 'dag-json' | 'dag-pb' | 'raw'} argv.inputCodec
     * @param {'dag-cbor' | 'dag-json' | 'dag-pb' | 'raw'} argv.storeCodec
     * @param {import('multiformats/cid').CIDVersion} argv.cidVersion
     * @param {boolean} argv.pin
     * @param {string} argv.hashAlg
     * @param {string} argv.cidBase
     * @param {boolean} argv.preload
     * @param {boolean} argv.onlyHash
     * @param {number} argv.timeout
     */
    function handler({ ctx: { ipfs, print, getStdin }, data, inputCodec, storeCodec, pin, hashAlg, cidVersion, cidBase, preload, onlyHash, timeout }: {
        ctx: import("../../types").Context;
        data: string;
        inputCodec: "raw" | "dag-pb" | "dag-cbor" | "dag-json";
        storeCodec: "raw" | "dag-pb" | "dag-cbor" | "dag-json";
        cidVersion: import("multiformats/cid").CIDVersion;
        pin: boolean;
        hashAlg: string;
        cidBase: string;
        preload: boolean;
        onlyHash: boolean;
        timeout: number;
    }): Promise<void>;
}
export default _default;
export type BlockCodec<T> = import('multiformats/codecs/interface').BlockCodec<number, T>;
//# sourceMappingURL=put.d.ts.map