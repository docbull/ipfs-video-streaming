declare namespace _default {
    const command: string;
    const describe: string;
    const builder: {
        'local-resolve': {
            type: string;
            default: boolean;
        };
        'output-codec': {
            describe: string;
            type: string;
            choices: string[];
            default: string;
        };
        'data-enc': {
            describe: string;
            type: string;
            choices: string[];
        };
        timeout: {
            type: string;
            coerce: ((input: string, format?: import("parse-duration").Units | undefined) => number) & {
                [key: string]: number;
            };
        };
    };
    /**
     * @param {object} argv
     * @param {import('../../types').Context} argv.ctx
     * @param {string} argv.cidpath
     * @param {'dag-json' | 'dag-cbor' | 'dag-pb' | 'raw'} argv.outputCodec
     * @param {'base16' | 'base64' | 'base58btc'} argv.dataEnc
     * @param {boolean} argv.localResolve
     * @param {number} argv.timeout
     */
    function handler({ ctx: { ipfs, print }, cidpath, dataEnc, outputCodec, localResolve, timeout }: {
        ctx: import("../../types").Context;
        cidpath: string;
        outputCodec: "raw" | "dag-pb" | "dag-cbor" | "dag-json";
        dataEnc: "base64" | "base58btc" | "base16";
        localResolve: boolean;
        timeout: number;
    }): Promise<void>;
    /**
     * @param {object} argv
     * @param {import('../../types').Context} argv.ctx
     * @param {string} argv.cidpath
     * @param {'dag-json' | 'dag-cbor' | 'dag-pb' | 'raw'} argv.outputCodec
     * @param {'base16' | 'base64' | 'base58btc'} argv.dataEnc
     * @param {boolean} argv.localResolve
     * @param {number} argv.timeout
     */
    function handler({ ctx: { ipfs, print }, cidpath, dataEnc, outputCodec, localResolve, timeout }: {
        ctx: import("../../types").Context;
        cidpath: string;
        outputCodec: "raw" | "dag-pb" | "dag-cbor" | "dag-json";
        dataEnc: "base64" | "base58btc" | "base16";
        localResolve: boolean;
        timeout: number;
    }): Promise<void>;
}
export default _default;
export type BlockCodec<T> = import('multiformats/codecs/interface').BlockCodec<number, T>;
//# sourceMappingURL=get.d.ts.map