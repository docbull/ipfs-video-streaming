declare namespace _default {
    const command: string;
    const describe: string;
    namespace builder {
        namespace nocache {
            export const type: string;
            export const alias: string;
            const describe_1: string;
            export { describe_1 as describe };
            const _default: boolean;
            export { _default as default };
        }
        namespace recursive {
            const type_1: string;
            export { type_1 as type };
            const alias_1: string;
            export { alias_1 as alias };
            const describe_2: string;
            export { describe_2 as describe };
            const _default_1: boolean;
            export { _default_1 as default };
        }
        namespace stream {
            const type_2: string;
            export { type_2 as type };
            const alias_2: string;
            export { alias_2 as alias };
            const describe_3: string;
            export { describe_3 as describe };
            const _default_2: boolean;
            export { _default_2 as default };
        }
        namespace timeout {
            const type_3: string;
            export { type_3 as type };
            export { parseDuration as coerce };
        }
    }
    /**
     * @param {object} argv
     * @param {import('../../types').Context} argv.ctx
     * @param {string} argv.name
     * @param {boolean} argv.nocache
     * @param {boolean} argv.recursive
     * @param {boolean} argv.stream
     * @param {number} argv.timeout
     */
    function handler({ ctx: { ipfs, print }, nocache, recursive, name, stream, timeout }: {
        ctx: import("../../types").Context;
        name: string;
        nocache: boolean;
        recursive: boolean;
        stream: boolean;
        timeout: number;
    }): Promise<void>;
    /**
     * @param {object} argv
     * @param {import('../../types').Context} argv.ctx
     * @param {string} argv.name
     * @param {boolean} argv.nocache
     * @param {boolean} argv.recursive
     * @param {boolean} argv.stream
     * @param {number} argv.timeout
     */
    function handler({ ctx: { ipfs, print }, nocache, recursive, name, stream, timeout }: {
        ctx: import("../../types").Context;
        name: string;
        nocache: boolean;
        recursive: boolean;
        stream: boolean;
        timeout: number;
    }): Promise<void>;
}
export default _default;
import parseDuration from "parse-duration";
//# sourceMappingURL=resolve.d.ts.map