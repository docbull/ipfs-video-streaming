export const commands: ({
    command: string;
    describe: string;
    builder: {
        ipfsPath: {
            type: string;
        };
        resolve: {
            alias: string;
            describe: string;
            default: boolean;
            type: string;
        };
        lifetime: {
            alias: string;
            describe: string;
            default: string;
            type: string;
        };
        key: {
            alias: string;
            describe: string;
            default: string;
            type: string;
        };
        ttl: {
            describe: string;
            default: string;
            type: string;
        };
        timeout: {
            type: string;
            coerce: ((input: string, format?: import("parse-duration").Units | undefined) => number) & {
                [key: string]: number;
            };
        };
    };
    handler({ ctx: { ipfs, print }, ipfsPath, resolve, lifetime, key, ttl, timeout }: {
        ctx: import("../../types.js").Context;
        ipfsPath: import("multiformats").CID;
        resolve: boolean;
        lifetime: string;
        key: string;
        ttl: string;
        timeout: number;
    }): Promise<void>;
} | {
    command: string;
    description: string;
    builder(yargs: import("yargs").Argv<any>): import("yargs").Argv<any>;
} | {
    command: string;
    describe: string;
    builder: {
        nocache: {
            type: string;
            alias: string;
            describe: string;
            default: boolean;
        };
        recursive: {
            type: string;
            alias: string;
            describe: string;
            default: boolean;
        };
        stream: {
            type: string;
            alias: string;
            describe: string;
            default: boolean;
        };
        timeout: {
            type: string;
            coerce: ((input: string, format?: import("parse-duration").Units | undefined) => number) & {
                [key: string]: number;
            };
        };
    };
    handler({ ctx: { ipfs, print }, nocache, recursive, name, stream, timeout }: {
        ctx: import("../../types.js").Context;
        name: string;
        nocache: boolean;
        recursive: boolean;
        stream: boolean;
        timeout: number;
    }): Promise<void>;
})[];
//# sourceMappingURL=index.d.ts.map