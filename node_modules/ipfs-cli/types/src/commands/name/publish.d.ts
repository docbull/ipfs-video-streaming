declare namespace _default {
    const command: string;
    const describe: string;
    namespace builder {
        namespace ipfsPath {
            const type: string;
        }
        namespace resolve {
            export const alias: string;
            const describe_1: string;
            export { describe_1 as describe };
            const _default: boolean;
            export { _default as default };
            const type_1: string;
            export { type_1 as type };
        }
        namespace lifetime {
            const alias_1: string;
            export { alias_1 as alias };
            const describe_2: string;
            export { describe_2 as describe };
            const _default_1: string;
            export { _default_1 as default };
            const type_2: string;
            export { type_2 as type };
        }
        namespace key {
            const alias_2: string;
            export { alias_2 as alias };
            const describe_3: string;
            export { describe_3 as describe };
            const _default_2: string;
            export { _default_2 as default };
            const type_3: string;
            export { type_3 as type };
        }
        namespace ttl {
            const describe_4: string;
            export { describe_4 as describe };
            const _default_3: string;
            export { _default_3 as default };
            const type_4: string;
            export { type_4 as type };
        }
        namespace timeout {
            const type_5: string;
            export { type_5 as type };
            export { parseDuration as coerce };
        }
    }
    /**
     * @param {object} argv
     * @param {import('../../types').Context} argv.ctx
     * @param {import('multiformats/cid').CID} argv.ipfsPath
     * @param {boolean} argv.resolve
     * @param {string} argv.lifetime
     * @param {string} argv.key
     * @param {string} argv.ttl
     * @param {number} argv.timeout
     */
    function handler({ ctx: { ipfs, print }, ipfsPath, resolve, lifetime, key, ttl, timeout }: {
        ctx: import("../../types").Context;
        ipfsPath: import("multiformats/cid").CID;
        resolve: boolean;
        lifetime: string;
        key: string;
        ttl: string;
        timeout: number;
    }): Promise<void>;
    /**
     * @param {object} argv
     * @param {import('../../types').Context} argv.ctx
     * @param {import('multiformats/cid').CID} argv.ipfsPath
     * @param {boolean} argv.resolve
     * @param {string} argv.lifetime
     * @param {string} argv.key
     * @param {string} argv.ttl
     * @param {number} argv.timeout
     */
    function handler({ ctx: { ipfs, print }, ipfsPath, resolve, lifetime, key, ttl, timeout }: {
        ctx: import("../../types").Context;
        ipfsPath: import("multiformats/cid").CID;
        resolve: boolean;
        lifetime: string;
        key: string;
        ttl: string;
        timeout: number;
    }): Promise<void>;
}
export default _default;
import parseDuration from "parse-duration";
//# sourceMappingURL=publish.d.ts.map