declare namespace _default {
    const command: string;
    const describe: string;
    const builder: {
        progress: {
            alias: string;
            type: string;
            default: boolean;
            describe: string;
        };
        recursive: {
            alias: string;
            type: string;
            default: boolean;
        };
        trickle: {
            alias: string;
            type: string;
            default: boolean;
            describe: string;
        };
        'wrap-with-directory': {
            alias: string;
            type: string;
            default: boolean;
            describe: string;
        };
        'only-hash': {
            alias: string;
            type: string;
            default: boolean;
            describe: string;
        };
        'block-write-concurrency': {
            type: string;
            default: number;
            describe: string;
        };
        chunker: {
            default: string;
            describe: string;
        };
        'file-import-concurrency': {
            type: string;
            default: number;
            describe: string;
        };
        'enable-sharding-experiment': {
            type: string;
            default: boolean;
        };
        'shard-split-threshold': {
            type: string;
            default: number;
        };
        'raw-leaves': {
            type: string;
            describe: string;
        };
        'cid-version': {
            type: string;
            describe: string;
            default: number;
        };
        'cid-base': {
            describe: string;
            type: string;
            default: string;
        };
        hash: {
            type: string;
            describe: string;
            default: string;
        };
        quiet: {
            alias: string;
            type: string;
            default: boolean;
            describe: string;
        };
        quieter: {
            alias: string;
            type: string;
            default: boolean;
            describe: string;
        };
        silent: {
            type: string;
            default: boolean;
            describe: string;
        };
        pin: {
            type: string;
            default: boolean;
            describe: string;
        };
        preload: {
            type: string;
            default: boolean;
            describe: string;
        };
        hidden: {
            alias: string;
            type: string;
            default: boolean;
            describe: string;
        };
        'preserve-mode': {
            type: string;
            default: boolean;
            describe: string;
        };
        'preserve-mtime': {
            type: string;
            default: boolean;
            describe: string;
        };
        mode: {
            type: string;
            describe: string;
        };
        mtime: {
            type: string;
            coerce: (value: any) => any;
            describe: string;
        };
        'mtime-nsecs': {
            type: string;
            coerce: (value: any) => any;
            describe: string;
        };
        timeout: {
            type: string;
            coerce: ((input: string, format?: import("parse-duration").Units | undefined) => number) & {
                [key: string]: number;
            };
        };
    };
    /**
     * @param {object} argv
     * @param {import('../types').Context} argv.ctx
     * @param {boolean} argv.trickle
     * @param {number} argv.shardSplitThreshold
     * @param {import('multiformats/cid').CIDVersion} argv.cidVersion
     * @param {boolean} argv.rawLeaves
     * @param {boolean} argv.onlyHash
     * @param {string} argv.hash
     * @param {boolean} argv.wrapWithDirectory
     * @param {boolean} argv.pin
     * @param {string} argv.chunker
     * @param {boolean} argv.preload
     * @param {number} argv.fileImportConcurrency
     * @param {number} argv.blockWriteConcurrency
     * @param {number} argv.timeout
     * @param {boolean} argv.quieter
     * @param {boolean} argv.quiet
     * @param {boolean} argv.silent
     * @param {boolean} argv.progress
     * @param {string[]} argv.file
     * @param {number} argv.mtime
     * @param {number} argv.mtimeNsecs
     * @param {boolean} argv.recursive
     * @param {boolean} argv.hidden
     * @param {boolean} argv.preserveMode
     * @param {boolean} argv.preserveMtime
     * @param {number} argv.mode
     * @param {string} argv.cidBase
     * @param {boolean} argv.enableShardingExperiment
     */
    function handler({ ctx: { ipfs, print, isDaemon, getStdin }, trickle, shardSplitThreshold, cidVersion, rawLeaves, onlyHash, hash, wrapWithDirectory, pin, chunker, preload, fileImportConcurrency, blockWriteConcurrency, timeout, quieter, quiet, silent, progress, file, mtime, mtimeNsecs, recursive, hidden, preserveMode, preserveMtime, mode, cidBase, enableShardingExperiment }: {
        ctx: import("../types").Context;
        trickle: boolean;
        shardSplitThreshold: number;
        cidVersion: import("multiformats/cid").CIDVersion;
        rawLeaves: boolean;
        onlyHash: boolean;
        hash: string;
        wrapWithDirectory: boolean;
        pin: boolean;
        chunker: string;
        preload: boolean;
        fileImportConcurrency: number;
        blockWriteConcurrency: number;
        timeout: number;
        quieter: boolean;
        quiet: boolean;
        silent: boolean;
        progress: boolean;
        file: string[];
        mtime: number;
        mtimeNsecs: number;
        recursive: boolean;
        hidden: boolean;
        preserveMode: boolean;
        preserveMtime: boolean;
        mode: number;
        cidBase: string;
        enableShardingExperiment: boolean;
    }): Promise<void>;
    /**
     * @param {object} argv
     * @param {import('../types').Context} argv.ctx
     * @param {boolean} argv.trickle
     * @param {number} argv.shardSplitThreshold
     * @param {import('multiformats/cid').CIDVersion} argv.cidVersion
     * @param {boolean} argv.rawLeaves
     * @param {boolean} argv.onlyHash
     * @param {string} argv.hash
     * @param {boolean} argv.wrapWithDirectory
     * @param {boolean} argv.pin
     * @param {string} argv.chunker
     * @param {boolean} argv.preload
     * @param {number} argv.fileImportConcurrency
     * @param {number} argv.blockWriteConcurrency
     * @param {number} argv.timeout
     * @param {boolean} argv.quieter
     * @param {boolean} argv.quiet
     * @param {boolean} argv.silent
     * @param {boolean} argv.progress
     * @param {string[]} argv.file
     * @param {number} argv.mtime
     * @param {number} argv.mtimeNsecs
     * @param {boolean} argv.recursive
     * @param {boolean} argv.hidden
     * @param {boolean} argv.preserveMode
     * @param {boolean} argv.preserveMtime
     * @param {number} argv.mode
     * @param {string} argv.cidBase
     * @param {boolean} argv.enableShardingExperiment
     */
    function handler({ ctx: { ipfs, print, isDaemon, getStdin }, trickle, shardSplitThreshold, cidVersion, rawLeaves, onlyHash, hash, wrapWithDirectory, pin, chunker, preload, fileImportConcurrency, blockWriteConcurrency, timeout, quieter, quiet, silent, progress, file, mtime, mtimeNsecs, recursive, hidden, preserveMode, preserveMtime, mode, cidBase, enableShardingExperiment }: {
        ctx: import("../types").Context;
        trickle: boolean;
        shardSplitThreshold: number;
        cidVersion: import("multiformats/cid").CIDVersion;
        rawLeaves: boolean;
        onlyHash: boolean;
        hash: string;
        wrapWithDirectory: boolean;
        pin: boolean;
        chunker: string;
        preload: boolean;
        fileImportConcurrency: number;
        blockWriteConcurrency: number;
        timeout: number;
        quieter: boolean;
        quiet: boolean;
        silent: boolean;
        progress: boolean;
        file: string[];
        mtime: number;
        mtimeNsecs: number;
        recursive: boolean;
        hidden: boolean;
        preserveMode: boolean;
        preserveMtime: boolean;
        mode: number;
        cidBase: string;
        enableShardingExperiment: boolean;
    }): Promise<void>;
}
export default _default;
//# sourceMappingURL=add.d.ts.map