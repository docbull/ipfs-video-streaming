export const commands: ({
    command: string;
    describe: string;
    builder: {
        'cid-base': {
            describe: string;
            type: string;
            default: string;
        };
        human: {
            type: string;
            default: boolean;
        };
        timeout: {
            type: string;
            coerce: ((input: string, format?: import("parse-duration").Units | undefined) => number) & {
                [key: string]: number;
            };
        };
    };
    handler({ ctx, cidBase, human, timeout }: {
        ctx: import("../../types.js").Context;
        human: boolean;
        cidBase: string;
        timeout: number;
    }): Promise<void>;
} | {
    command: string;
    describe: string;
    builder: {
        peer: {
            type: string;
            default: string;
        };
        proto: {
            type: string;
            default: string;
        };
        poll: {
            type: string;
            default: boolean;
        };
        interval: {
            type: string;
            default: string;
            coerce: ((input: string, format?: import("parse-duration").Units | undefined) => number) & {
                [key: string]: number;
            };
        };
        timeout: {
            type: string;
            coerce: ((input: string, format?: import("parse-duration").Units | undefined) => number) & {
                [key: string]: number;
            };
        };
    };
    handler({ ctx: { ipfs, print }, peer, proto, poll, interval, timeout }: {
        ctx: import("../../types.js").Context;
        peer: string;
        proto: string;
        poll: boolean;
        interval: number;
        timeout: number;
    }): Promise<void>;
} | {
    command: string;
    describe: string;
    builder: {
        human: {
            type: string;
            alias: string;
            default: boolean;
        };
        sizeOnly: {
            type: string;
            alias: string;
            default: boolean;
        };
        timeout: {
            type: string;
            coerce: ((input: string, format?: import("parse-duration").Units | undefined) => number) & {
                [key: string]: number;
            };
        };
    };
    handler({ ctx: { ipfs, print }, human, sizeOnly, timeout }: {
        ctx: import("../../types.js").Context;
        human: boolean;
        sizeOnly: boolean;
        timeout: number;
    }): Promise<void>;
})[];
//# sourceMappingURL=index.d.ts.map