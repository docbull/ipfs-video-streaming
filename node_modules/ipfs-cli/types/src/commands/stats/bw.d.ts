declare namespace _default {
    const command: string;
    const describe: string;
    namespace builder {
        namespace peer {
            export const type: string;
            const _default: string;
            export { _default as default };
        }
        namespace proto {
            const type_1: string;
            export { type_1 as type };
            const _default_1: string;
            export { _default_1 as default };
        }
        namespace poll {
            const type_2: string;
            export { type_2 as type };
            const _default_2: boolean;
            export { _default_2 as default };
        }
        namespace interval {
            const type_3: string;
            export { type_3 as type };
            const _default_3: string;
            export { _default_3 as default };
            export { parseDuration as coerce };
        }
        namespace timeout {
            const type_4: string;
            export { type_4 as type };
            export { parseDuration as coerce };
        }
    }
    /**
     * @param {object} argv
     * @param {import('../../types').Context} argv.ctx
     * @param {string} argv.peer
     * @param {string} argv.proto
     * @param {boolean} argv.poll
     * @param {number} argv.interval
     * @param {number} argv.timeout
     */
    function handler({ ctx: { ipfs, print }, peer, proto, poll, interval, timeout }: {
        ctx: import("../../types").Context;
        peer: string;
        proto: string;
        poll: boolean;
        interval: number;
        timeout: number;
    }): Promise<void>;
    /**
     * @param {object} argv
     * @param {import('../../types').Context} argv.ctx
     * @param {string} argv.peer
     * @param {string} argv.proto
     * @param {boolean} argv.poll
     * @param {number} argv.interval
     * @param {number} argv.timeout
     */
    function handler({ ctx: { ipfs, print }, peer, proto, poll, interval, timeout }: {
        ctx: import("../../types").Context;
        peer: string;
        proto: string;
        poll: boolean;
        interval: number;
        timeout: number;
    }): Promise<void>;
}
export default _default;
import parseDuration from "parse-duration";
//# sourceMappingURL=bw.d.ts.map