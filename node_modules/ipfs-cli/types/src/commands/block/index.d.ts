export const commands: ({
    command: string;
    describe: string;
    builder: {
        key: {
            type: string;
            coerce: (value: any) => import("multiformats").CID | undefined;
        };
        timeout: {
            type: string;
            coerce: ((input: string, format?: import("parse-duration").Units | undefined) => number) & {
                [key: string]: number;
            };
        };
    };
    handler({ ctx, key, timeout }: {
        ctx: import("../../types.js").Context;
        key: import("multiformats").CID;
        timeout: number;
    }): Promise<void>;
} | {
    command: string;
    describe: string;
    builder: {
        format: {
            alias: string;
            describe: string;
            default: string;
        };
        mhtype: {
            describe: string;
            default: string;
        };
        mhlen: {
            describe: string;
            default: undefined;
        };
        version: {
            describe: string;
            type: string;
            default: number;
        };
        'cid-base': {
            describe: string;
            type: string;
            default: string;
        };
        pin: {
            describe: string;
            type: string;
            default: boolean;
        };
        timeout: {
            type: string;
            coerce: ((input: string, format?: import("parse-duration").Units | undefined) => number) & {
                [key: string]: number;
            };
        };
    };
    handler({ ctx: { ipfs, print, getStdin }, block, timeout, format, mhtype, mhlen, version, cidBase, pin }: {
        ctx: import("../../types.js").Context;
        block: string;
        format: string;
        mhtype: string;
        mhlen: number;
        version: import("multiformats/cid").CIDVersion;
        pin: boolean;
        cidBase: string;
        timeout: number;
    }): Promise<void>;
} | {
    command: string;
    describe: string;
    builder: {
        hash: {
            type: string;
            coerce: (values: string[]) => (import("multiformats").CID | undefined)[];
        };
        force: {
            alias: string;
            describe: string;
            type: string;
            default: boolean;
        };
        quiet: {
            alias: string;
            describe: string;
            type: string;
            default: boolean;
        };
        timeout: {
            type: string;
            coerce: ((input: string, format?: import("parse-duration").Units | undefined) => number) & {
                [key: string]: number;
            };
        };
    };
    handler({ ctx, hash, force, quiet, timeout }: {
        ctx: import("../../types.js").Context;
        hash: import("multiformats").CID[];
        force: boolean;
        quiet: boolean;
        timeout: number;
    }): Promise<void>;
})[];
//# sourceMappingURL=index.d.ts.map