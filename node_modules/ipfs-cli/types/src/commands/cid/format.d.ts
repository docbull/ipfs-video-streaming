declare namespace _default {
    const command: string;
    const describe: string;
    const builder: {
        format: {
            describe: string;
            alias: string;
            type: string;
            default: string;
        };
        'cid-version': {
            describe: string;
            alias: string;
            type: string;
        };
        base: {
            describe: string;
            alias: string;
            type: string;
        };
    };
    /**
     * @param {object} argv
     * @param {import('../../types').Context} argv.ctx
     * @param {string[]} [argv.cids]
     * @param {string} [argv.format]
     * @param {import('multiformats/cid').CIDVersion} [argv.cidVersion]
     * @param {string} [argv.base]
     */
    function handler({ ctx: { ipfs, print, getStdin }, cids, format, cidVersion, base }: {
        ctx: import("../../types").Context;
        cids?: string[] | undefined;
        format?: string | undefined;
        cidVersion?: import("multiformats/cid").CIDVersion | undefined;
        base?: string | undefined;
    }): Promise<void>;
    /**
     * @param {object} argv
     * @param {import('../../types').Context} argv.ctx
     * @param {string[]} [argv.cids]
     * @param {string} [argv.format]
     * @param {import('multiformats/cid').CIDVersion} [argv.cidVersion]
     * @param {string} [argv.base]
     */
    function handler({ ctx: { ipfs, print, getStdin }, cids, format, cidVersion, base }: {
        ctx: import("../../types").Context;
        cids?: string[] | undefined;
        format?: string | undefined;
        cidVersion?: import("multiformats/cid").CIDVersion | undefined;
        base?: string | undefined;
    }): Promise<void>;
}
export default _default;
//# sourceMappingURL=format.d.ts.map