declare namespace _default {
    const command: string;
    const describe: string;
    namespace builder {
        namespace output {
            export const alias: string;
            export const type: string;
            const _default: string;
            export { _default as default };
        }
        namespace force {
            const alias_1: string;
            export { alias_1 as alias };
            const type_1: string;
            export { type_1 as type };
            const _default_1: boolean;
            export { _default_1 as default };
        }
        namespace timeout {
            const type_2: string;
            export { type_2 as type };
            export { parseDuration as coerce };
        }
        namespace archive {
            const alias_2: string;
            export { alias_2 as alias };
            const type_3: string;
            export { type_3 as type };
            export const desc: string;
        }
        namespace compress {
            const alias_3: string;
            export { alias_3 as alias };
            const type_4: string;
            export { type_4 as type };
            const desc_1: string;
            export { desc_1 as desc };
        }
        namespace compressionLevel {
            const alias_4: string[];
            export { alias_4 as alias };
            const type_5: string;
            export { type_5 as type };
            const desc_2: string;
            export { desc_2 as desc };
            const _default_2: number;
            export { _default_2 as default };
        }
    }
    /**
     * @param {object} argv
     * @param {import('../types').Context} argv.ctx
     * @param {string} argv.ipfsPath
     * @param {string} argv.output
     * @param {boolean} argv.force
     * @param {number} argv.timeout
     * @param {boolean} argv.archive
     * @param {boolean} argv.compress
     * @param {-1 | 0 | 1 | 2 | 3 | 4 | 5 | 6| 7 | 8| 9} argv.compressionLevel
     */
    function handler({ ctx: { ipfs, print }, ipfsPath, output, force, timeout, archive, compress, compressionLevel }: {
        ctx: import("../types").Context;
        ipfsPath: string;
        output: string;
        force: boolean;
        timeout: number;
        archive: boolean;
        compress: boolean;
        compressionLevel: 0 | 1 | -1 | 2 | 8 | 9 | 7 | 6 | 5 | 4 | 3;
    }): Promise<void>;
    /**
     * @param {object} argv
     * @param {import('../types').Context} argv.ctx
     * @param {string} argv.ipfsPath
     * @param {string} argv.output
     * @param {boolean} argv.force
     * @param {number} argv.timeout
     * @param {boolean} argv.archive
     * @param {boolean} argv.compress
     * @param {-1 | 0 | 1 | 2 | 3 | 4 | 5 | 6| 7 | 8| 9} argv.compressionLevel
     */
    function handler({ ctx: { ipfs, print }, ipfsPath, output, force, timeout, archive, compress, compressionLevel }: {
        ctx: import("../types").Context;
        ipfsPath: string;
        output: string;
        force: boolean;
        timeout: number;
        archive: boolean;
        compress: boolean;
        compressionLevel: 0 | 1 | -1 | 2 | 8 | 9 | 7 | 6 | 5 | 4 | 3;
    }): Promise<void>;
}
export default _default;
import parseDuration from "parse-duration";
//# sourceMappingURL=get.d.ts.map