export const commandList: ({
    command: string;
    description: string;
    builder(yargs: import("yargs").Argv<any>): import("yargs").Argv<any>;
} | {
    command: string;
    describe: string;
    handler({ ctx }: {
        ctx: import("../types.js").Context;
    }): Promise<void>;
} | {
    command: string;
    description: string;
    builder: {
        count: {
            alias: string;
            type: string;
            default: number;
        };
        timeout: {
            type: string;
            coerce: ((input: string, format?: import("parse-duration").Units | undefined) => number) & {
                [key: string]: number;
            };
        };
    };
    handler({ ctx: { ipfs, print }, count, peerId, timeout }: {
        ctx: import("../types.js").Context;
        count: number;
        peerId: string;
        timeout: number;
    }): Promise<void>;
} | {
    command: string;
    description: string;
    builder: {
        recursive: {
            alias: string;
            type: string;
            default: boolean;
        };
        'cid-base': {
            describe: string;
            type: string;
            default: string;
        };
        timeout: {
            type: string;
            coerce: ((input: string, format?: import("parse-duration").Units | undefined) => number) & {
                [key: string]: number;
            };
        };
    };
    handler({ ctx: { print, ipfs }, name, recursive, cidBase, timeout }: {
        ctx: import("../types.js").Context;
        name: string;
        recursive: boolean;
        cidBase: string;
        timeout: number;
    }): Promise<void>;
} | {
    command: string;
    describe: string;
    builder: {
        timeout: {
            type: string;
            coerce: ((input: string, format?: import("parse-duration").Units | undefined) => number) & {
                [key: string]: number;
            };
        };
    };
    handler({ ctx: { ipfs }, timeout }: {
        ctx: import("../types.js").Context;
        timeout: number;
    }): any;
})[];
//# sourceMappingURL=index.d.ts.map