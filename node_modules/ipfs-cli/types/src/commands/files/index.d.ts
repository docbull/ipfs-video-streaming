export const commands: ({
    command: string;
    describe: string;
    builder: {
        parents: {
            alias: string;
            type: string;
            default: boolean;
            coerce: (value?: boolean | undefined) => boolean;
            describe: string;
        };
        'hash-alg': {
            alias: string;
            type: string;
            default: string;
            describe: string;
        };
        flush: {
            alias: string;
            type: string;
            default: boolean;
            coerce: (value?: boolean | undefined) => boolean;
            describe: string;
        };
        'shard-split-threshold': {
            type: string;
            default: number;
            describe: string;
        };
        timeout: {
            type: string;
            coerce: ((input: string, format?: import("parse-duration").Units | undefined) => number) & {
                [key: string]: number;
            };
        };
    };
    handler({ ctx: { ipfs }, source, dest, parents, flush, hashAlg, shardSplitThreshold, timeout }: {
        ctx: import("../../types.js").Context;
        source: string;
        dest: string;
        parents: boolean;
        hashAlg: string;
        flush: boolean;
        shardSplitThreshold: number;
        timeout: number;
    }): Promise<void>;
} | {
    command: string;
    describe: string;
    builder: {
        'cid-base': {
            describe: string;
            default: string;
        };
        timeout: {
            type: string;
            coerce: ((input: string, format?: import("parse-duration").Units | undefined) => number) & {
                [key: string]: number;
            };
        };
    };
    handler({ ctx: { ipfs, print }, path, cidBase, timeout }: {
        ctx: import("../../types.js").Context;
        path: string;
        cidBase: string;
        timeout: number;
    }): Promise<void>;
} | {
    command: string;
    describe: string;
    builder: {
        parents: {
            alias: string;
            type: string;
            default: boolean;
            coerce: (value?: boolean | undefined) => boolean;
            describe: string;
        };
        'cid-version': {
            alias: string[];
            type: string;
            default: number;
            describe: string;
        };
        'hash-alg': {
            alias: string;
            type: string;
            default: string;
            describe: string;
        };
        flush: {
            alias: string;
            type: string;
            default: boolean;
            coerce: (value?: boolean | undefined) => boolean;
            describe: string;
        };
        'shard-split-threshold': {
            type: string;
            default: number;
            describe: string;
        };
        mode: {
            type: string;
            coerce: (value: any) => number;
            describe: string;
        };
        mtime: {
            type: string;
            coerce: (value: any) => any;
            describe: string;
        };
        'mtime-nsecs': {
            type: string;
            coerce: (value: any) => any;
            describe: string;
        };
        timeout: {
            type: string;
            coerce: ((input: string, format?: import("parse-duration").Units | undefined) => number) & {
                [key: string]: number;
            };
        };
    };
    handler({ ctx: { ipfs }, path, parents, cidVersion, hashAlg, flush, shardSplitThreshold, mode, mtime, mtimeNsecs, timeout }: {
        ctx: import("../../types.js").Context;
        path: string;
        parents: boolean;
        cidVersion: import("multiformats/cid").CIDVersion;
        hashAlg: string;
        flush: boolean;
        shardSplitThreshold: number;
        mode: number;
        mtime: number;
        mtimeNsecs: number;
        timeout: number;
    }): Promise<void>;
} | {
    command: string;
    describe: string;
    builder: {
        offset: {
            alias: string;
            type: string;
            describe: string;
        };
        length: {
            alias: string;
            type: string;
            describe: string;
        };
        timeout: {
            type: string;
            coerce: ((input: string, format?: import("parse-duration").Units | undefined) => number) & {
                [key: string]: number;
            };
        };
    };
    handler({ ctx: { ipfs, print }, path, offset, length, timeout }: {
        ctx: import("../../types.js").Context;
        path: string;
        offset: number;
        length: number;
        timeout: number;
    }): Promise<void>;
} | {
    command: string;
    describe: string;
    builder: {
        recursive: {
            alias: string;
            type: string;
            default: boolean;
            coerce: (value?: boolean | undefined) => boolean;
            describe: string;
        };
        timeout: {
            type: string;
            coerce: ((input: string, format?: import("parse-duration").Units | undefined) => number) & {
                [key: string]: number;
            };
        };
    };
    handler({ ctx: { ipfs }, path, recursive, timeout }: {
        ctx: import("../../types.js").Context;
        path: string;
        recursive: boolean;
        timeout: number;
    }): Promise<void>;
} | {
    command: string;
    describe: string;
    builder: {
        mtime: {
            type: string;
            alias: string;
            coerce: (value: any) => any;
            describe: string;
        };
        'mtime-nsecs': {
            type: string;
            coerce: (value: any) => any;
            describe: string;
        };
        flush: {
            alias: string;
            type: string;
            default: boolean;
            coerce: (value?: boolean | undefined) => boolean;
            describe: string;
        };
        'cid-version': {
            alias: string[];
            type: string;
            default: number;
            describe: string;
        };
        'hash-alg': {
            alias: string;
            type: string;
            default: string;
            describe: string;
        };
        'shard-split-threshold': {
            type: string;
            default: number;
            describe: string;
        };
        timeout: {
            type: string;
            coerce: ((input: string, format?: import("parse-duration").Units | undefined) => number) & {
                [key: string]: number;
            };
        };
    };
    handler({ ctx: { ipfs }, path, flush, cidVersion, hashAlg, shardSplitThreshold, mtime, mtimeNsecs, timeout }: {
        ctx: import("../../types.js").Context;
        path: string;
        flush: boolean;
        cidVersion: import("multiformats/cid").CIDVersion;
        hashAlg: string;
        shardSplitThreshold: number;
        mtime: number;
        mtimeNsecs: number;
        timeout: number;
    }): Promise<void>;
})[];
//# sourceMappingURL=index.d.ts.map