declare namespace _default {
    const command: string;
    const describe: string;
    const builder: {
        mtime: {
            type: string;
            alias: string;
            coerce: (value: any) => any;
            describe: string;
        };
        'mtime-nsecs': {
            type: string;
            coerce: (value: any) => any;
            describe: string;
        };
        flush: {
            alias: string;
            type: string;
            default: boolean;
            coerce: (value?: boolean | undefined) => boolean;
            describe: string;
        };
        'cid-version': {
            alias: string[];
            type: string;
            default: number;
            describe: string;
        };
        'hash-alg': {
            alias: string;
            type: string;
            default: string;
            describe: string;
        };
        'shard-split-threshold': {
            type: string;
            default: number;
            describe: string;
        };
        timeout: {
            type: string;
            coerce: ((input: string, format?: import("parse-duration").Units | undefined) => number) & {
                [key: string]: number;
            };
        };
    };
    /**
     * @param {object} argv
     * @param {import('../../types').Context} argv.ctx
     * @param {string} argv.path
     * @param {boolean} argv.flush
     * @param {import('multiformats/cid').CIDVersion} argv.cidVersion
     * @param {string} argv.hashAlg
     * @param {number} argv.shardSplitThreshold
     * @param {number} argv.mtime
     * @param {number} argv.mtimeNsecs
     * @param {number} argv.timeout
     */
    function handler({ ctx: { ipfs }, path, flush, cidVersion, hashAlg, shardSplitThreshold, mtime, mtimeNsecs, timeout }: {
        ctx: import("../../types").Context;
        path: string;
        flush: boolean;
        cidVersion: import("multiformats/cid").CIDVersion;
        hashAlg: string;
        shardSplitThreshold: number;
        mtime: number;
        mtimeNsecs: number;
        timeout: number;
    }): Promise<void>;
    /**
     * @param {object} argv
     * @param {import('../../types').Context} argv.ctx
     * @param {string} argv.path
     * @param {boolean} argv.flush
     * @param {import('multiformats/cid').CIDVersion} argv.cidVersion
     * @param {string} argv.hashAlg
     * @param {number} argv.shardSplitThreshold
     * @param {number} argv.mtime
     * @param {number} argv.mtimeNsecs
     * @param {number} argv.timeout
     */
    function handler({ ctx: { ipfs }, path, flush, cidVersion, hashAlg, shardSplitThreshold, mtime, mtimeNsecs, timeout }: {
        ctx: import("../../types").Context;
        path: string;
        flush: boolean;
        cidVersion: import("multiformats/cid").CIDVersion;
        hashAlg: string;
        shardSplitThreshold: number;
        mtime: number;
        mtimeNsecs: number;
        timeout: number;
    }): Promise<void>;
}
export default _default;
//# sourceMappingURL=touch.d.ts.map