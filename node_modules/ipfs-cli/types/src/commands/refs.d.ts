declare namespace _default {
    const command: string;
    const describe: string;
    const builder: {
        recursive: {
            alias: string;
            desc: string;
            type: string;
            default: boolean;
        };
        format: {
            desc: string;
            type: string;
            default: string;
        };
        edges: {
            alias: string;
            desc: string;
            type: string;
            default: boolean;
        };
        unique: {
            alias: string;
            desc: string;
            type: string;
            default: boolean;
        };
        'max-depth': {
            desc: string;
            type: string;
        };
        timeout: {
            type: string;
            coerce: ((input: string, format?: import("parse-duration").Units | undefined) => number) & {
                [key: string]: number;
            };
        };
    };
    /**
     * @param {object} argv
     * @param {import('../types').Context} argv.ctx
     * @param {string} argv.key
     * @param {string} argv.keys
     * @param {boolean} argv.recursive
     * @param {string} argv.format
     * @param {boolean} argv.edges
     * @param {boolean} argv.unique
     * @param {number} argv.maxDepth
     * @param {number} argv.timeout
     */
    function handler({ ctx: { ipfs, print }, key, keys, recursive, format, edges, unique, maxDepth, timeout }: {
        ctx: import("../types").Context;
        key: string;
        keys: string;
        recursive: boolean;
        format: string;
        edges: boolean;
        unique: boolean;
        maxDepth: number;
        timeout: number;
    }): Promise<void>;
    /**
     * @param {object} argv
     * @param {import('../types').Context} argv.ctx
     * @param {string} argv.key
     * @param {string} argv.keys
     * @param {boolean} argv.recursive
     * @param {string} argv.format
     * @param {boolean} argv.edges
     * @param {boolean} argv.unique
     * @param {number} argv.maxDepth
     * @param {number} argv.timeout
     */
    function handler({ ctx: { ipfs, print }, key, keys, recursive, format, edges, unique, maxDepth, timeout }: {
        ctx: import("../types").Context;
        key: string;
        keys: string;
        recursive: boolean;
        format: string;
        edges: boolean;
        unique: boolean;
        maxDepth: number;
        timeout: number;
    }): Promise<void>;
}
export default _default;
//# sourceMappingURL=refs.d.ts.map