export const commands: ({
    command: string;
    describe: string;
    builder: {
        root: {
            type: string;
            coerce: (value: any) => import("multiformats").CID | undefined;
        };
        ref: {
            type: string;
            coerce: (value: any) => import("multiformats").CID | undefined;
        };
        'cid-base': {
            describe: string;
            type: string;
            default: string;
        };
        timeout: {
            type: string;
            coerce: ((input: string, format?: import("parse-duration").Units | undefined) => number) & {
                [key: string]: number;
            };
        };
    };
    handler({ ctx: { ipfs, print }, root, name, ref, cidBase, timeout }: {
        ctx: import("../../../types.js").Context;
        root: import("multiformats").CID;
        name: string;
        ref: import("multiformats").CID;
        cidBase: string;
        timeout: number;
    }): Promise<void>;
} | {
    command: string;
    describe: string;
    builder: {
        root: {
            type: string;
            coerce: (value: any) => import("multiformats").CID | undefined;
        };
        'cid-base': {
            describe: string;
            type: string;
            default: string;
        };
        timeout: {
            type: string;
            coerce: ((input: string, format?: import("parse-duration").Units | undefined) => number) & {
                [key: string]: number;
            };
        };
    };
    handler({ ctx: { ipfs, print, getStdin }, root, data, cidBase, timeout }: {
        ctx: import("../../../types.js").Context;
        root: import("multiformats").CID;
        data: string;
        cidBase: string;
        timeout: number;
    }): Promise<void>;
} | {
    command: string;
    describe: string;
    builder: {
        root: {
            type: string;
            coerce: (value: any) => import("multiformats").CID | undefined;
        };
        'cid-base': {
            describe: string;
            type: string;
            default: string;
        };
        timeout: {
            type: string;
            coerce: ((input: string, format?: import("parse-duration").Units | undefined) => number) & {
                [key: string]: number;
            };
        };
    };
    handler({ ctx: { ipfs, print }, root, link, cidBase, timeout }: {
        ctx: import("../../../types.js").Context;
        root: import("multiformats").CID;
        link: string;
        cidBase: string;
        timeout: number;
    }): Promise<void>;
})[];
//# sourceMappingURL=index.d.ts.map