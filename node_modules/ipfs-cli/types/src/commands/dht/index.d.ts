export const commands: ({
    command: string;
    describe: string;
    builder: {
        peerId: {
            type: string;
        };
        timeout: {
            type: string;
            coerce: ((input: string, format?: import("parse-duration").Units | undefined) => number) & {
                [key: string]: number;
            };
        };
    };
    handler({ ctx: { ipfs, print }, peerId, timeout }: {
        ctx: import("../../types.js").Context;
        peerId: string;
        timeout: number;
    }): Promise<void>;
} | {
    command: string;
    describe: string;
    builder: {
        key: {
            type: string;
            coerce: (value: any) => import("multiformats").CID | undefined;
        };
        timeout: {
            type: string;
            coerce: ((input: string, format?: import("parse-duration").Units | undefined) => number) & {
                [key: string]: number;
            };
        };
    };
    handler({ ctx: { ipfs, print }, key, timeout }: {
        ctx: import("../../types.js").Context;
        key: import("multiformats").CID;
        timeout: number;
    }): Promise<void>;
} | {
    command: string;
    describe: string;
    builder: {
        timeout: {
            type: string;
            coerce: ((input: string, format?: import("parse-duration").Units | undefined) => number) & {
                [key: string]: number;
            };
        };
    };
    handler({ ctx: { ipfs }, key, value, timeout }: {
        ctx: import("../../types.js").Context;
        key: string;
        value: string;
        timeout: number;
    }): Promise<void>;
})[];
//# sourceMappingURL=index.d.ts.map