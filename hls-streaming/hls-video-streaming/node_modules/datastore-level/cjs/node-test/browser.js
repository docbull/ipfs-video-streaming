'use strict';

var datastoreCore = require('datastore-core');
var key = require('interface-datastore/key');
var leveljs = require('level');
var index = require('../src/index.js');
var interfaceDatastoreTests = require('interface-datastore-tests');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var leveljs__default = /*#__PURE__*/_interopDefaultLegacy(leveljs);

describe('LevelDatastore', () => {
  describe('interface-datastore (leveljs)', () => {
    interfaceDatastoreTests.interfaceDatastoreTests({
      setup: () => new index.LevelDatastore('hello', { db: leveljs__default["default"] }),
      teardown: () => new Promise((resolve, reject) => {
        leveljs__default["default"].destroy('hello', err => {
          if (err)
            return reject(err);
          resolve(true);
        });
      })
    });
  });
  describe('interface-datastore (mount(leveljs, leveljs, leveljs))', () => {
    interfaceDatastoreTests.interfaceDatastoreTests({
      setup() {
        return new datastoreCore.MountDatastore([
          {
            prefix: new key.Key('/a'),
            datastore: new index.LevelDatastore('one', { db: leveljs__default["default"] })
          },
          {
            prefix: new key.Key('/q'),
            datastore: new index.LevelDatastore('two', { db: leveljs__default["default"] })
          },
          {
            prefix: new key.Key('/z'),
            datastore: new index.LevelDatastore('three', { db: leveljs__default["default"] })
          }
        ]);
      },
      teardown() {
        return Promise.all([
          'one',
          'two',
          'three'
        ].map(dir => {
          return new Promise((resolve, reject) => {
            leveljs__default["default"].destroy(dir, err => {
              if (err)
                return reject(err);
              resolve(true);
            });
          });
        }));
      }
    });
  });
});
