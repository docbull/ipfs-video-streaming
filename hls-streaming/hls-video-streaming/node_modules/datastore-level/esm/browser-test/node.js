import { expect } from 'aegir/utils/chai.js';
import path from 'path';
import { Key } from 'interface-datastore/key';
import rimraf from 'rimraf';
import { MountDatastore } from 'datastore-core';
import { CID } from 'multiformats/cid';
import * as Digest from 'multiformats/hashes/digest';
import * as dagCbor from '@ipld/dag-cbor';
import { promisify } from 'util';
import childProcess from 'child_process';
import level from 'level';
import { interfaceDatastoreTests } from 'interface-datastore-tests';
import { LevelDatastore } from '../src/index.js';
import tempdir from 'ipfs-utils/src/temp-dir.js';
describe('LevelDatastore', () => {
  describe('interface-datastore (leveldown)', () => {
    const dir = tempdir();
    interfaceDatastoreTests({
      setup: () => new LevelDatastore(dir, { db: level }),
      teardown: () => promisify(rimraf)(dir)
    });
  });
  describe('interface-datastore (mount(leveldown, leveldown, leveldown))', () => {
    const dirs = [
      tempdir(),
      tempdir(),
      tempdir()
    ];
    interfaceDatastoreTests({
      setup() {
        return new MountDatastore([
          {
            prefix: new Key('/a'),
            datastore: new LevelDatastore(dirs[0], { db: level })
          },
          {
            prefix: new Key('/q'),
            datastore: new LevelDatastore(dirs[1], { db: level })
          },
          {
            prefix: new Key('/z'),
            datastore: new LevelDatastore(dirs[2], { db: level })
          }
        ]);
      },
      teardown() {
        return Promise.all(dirs.map(dir => promisify(rimraf)(dir)));
      }
    });
  });
  it.skip('interop with go', async () => {
    const store = new LevelDatastore(path.join(__dirname, 'test-repo', 'datastore'), { db: level });
    const cids = [];
    for await (const e of store.query({})) {
      cids.push(CID.createV1(dagCbor.code, Digest.decode(e.key.uint8Array())));
    }
    expect(cids[0].version).to.be.eql(0);
    expect(cids).to.have.length(4);
  });
  it('should not leave iterators open and leak memory', done => {
    const cp = childProcess.fork(path.join(process.cwd(), '/test/fixtures/test-level-iterator-destroy'), { stdio: 'pipe' });
    let out = '';
    const {stdout, stderr} = cp;
    stdout && stdout.on('data', d => {
      out += d;
    });
    stderr && stderr.on('data', d => {
      out += d;
    });
    cp.on('exit', code => {
      expect(code).to.equal(0);
      expect(out).to.not.include('Assertion failed: (ended_)');
      done();
    });
  });
});