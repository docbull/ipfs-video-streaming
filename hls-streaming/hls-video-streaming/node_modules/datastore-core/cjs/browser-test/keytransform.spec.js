'use strict';

var chai_js = require('aegir/utils/chai.js');
var all = require('it-all');
var key = require('interface-datastore/key');
var memory = require('../src/memory.js');
var keytransform = require('../src/keytransform.js');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var all__default = /*#__PURE__*/_interopDefaultLegacy(all);

describe('KeyTransformDatastore', () => {
  it('basic', async () => {
    const mStore = new memory.MemoryDatastore();
    const transform = {
      convert(key$1) {
        return new key.Key('/abc').child(key$1);
      },
      invert(key$1) {
        const l = key$1.list();
        if (l[0] !== 'abc') {
          throw new Error('missing prefix, convert failed?');
        }
        return key.Key.withNamespaces(l.slice(1));
      }
    };
    const kStore = new keytransform.KeyTransformDatastore(mStore, transform);
    const keys = [
      'foo',
      'foo/bar',
      'foo/bar/baz',
      'foo/barb',
      'foo/bar/bazb',
      'foo/bar/baz/barb'
    ].map(s => new key.Key(s));
    await Promise.all(keys.map(key => kStore.put(key, key.uint8Array())));
    const kResults = Promise.all(keys.map(key => kStore.get(key)));
    const mResults = Promise.all(keys.map(key$1 => mStore.get(new key.Key('abc').child(key$1))));
    const results = await Promise.all([
      kResults,
      mResults
    ]);
    chai_js.expect(results[0]).to.eql(results[1]);
    const mRes = await all__default["default"](mStore.query({}));
    const kRes = await all__default["default"](kStore.query({}));
    chai_js.expect(kRes).to.have.length(mRes.length);
    mRes.forEach((a, i) => {
      const kA = a.key;
      const kB = kRes[i].key;
      chai_js.expect(transform.invert(kA)).to.eql(kB);
      chai_js.expect(kA).to.eql(transform.convert(kB));
    });
    await kStore.close();
  });
});
