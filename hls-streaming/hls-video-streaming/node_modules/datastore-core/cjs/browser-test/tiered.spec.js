'use strict';

var chai_js = require('aegir/utils/chai.js');
var key = require('interface-datastore/key');
var memory = require('../src/memory.js');
var tiered = require('../src/tiered.js');
var fromString = require('uint8arrays/from-string');
var interfaceDatastoreTests = require('interface-datastore-tests');

describe('Tiered', () => {
  describe('all stores', () => {
    const ms = [];
    let store;
    beforeEach(() => {
      ms.push(new memory.MemoryDatastore());
      ms.push(new memory.MemoryDatastore());
      store = new tiered.TieredDatastore(ms);
    });
    it('put', async () => {
      const k = new key.Key('hello');
      const v = fromString.fromString('world');
      await store.put(k, v);
      const res = await Promise.all([
        ms[0].get(k),
        ms[1].get(k)
      ]);
      res.forEach(val => {
        chai_js.expect(val).to.be.eql(v);
      });
    });
    it('get and has, where available', async () => {
      const k = new key.Key('hello');
      const v = fromString.fromString('world');
      await ms[1].put(k, v);
      const val = await store.get(k);
      chai_js.expect(val).to.be.eql(v);
      const exists = await store.has(k);
      chai_js.expect(exists).to.be.eql(true);
    });
    it('has - key not found', async () => {
      chai_js.expect(await store.has(new key.Key('hello1'))).to.be.eql(false);
    });
    it('has and delete', async () => {
      const k = new key.Key('hello');
      const v = fromString.fromString('world');
      await store.put(k, v);
      let res = await Promise.all([
        ms[0].has(k),
        ms[1].has(k)
      ]);
      chai_js.expect(res).to.be.eql([
        true,
        true
      ]);
      await store.delete(k);
      res = await Promise.all([
        ms[0].has(k),
        ms[1].has(k)
      ]);
      chai_js.expect(res).to.be.eql([
        false,
        false
      ]);
    });
  });
  describe('inteface-datastore-single', () => {
    interfaceDatastoreTests.interfaceDatastoreTests({
      setup() {
        return new tiered.TieredDatastore([
          new memory.MemoryDatastore(),
          new memory.MemoryDatastore()
        ]);
      },
      teardown() {
      }
    });
  });
});
