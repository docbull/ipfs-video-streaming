export type PeerId = import('peer-id');
export type DHTMessageHandler = import('../types').DHTMessageHandler;
export type PeerData = import('../../types').PeerData;
/**
 * @typedef {import('peer-id')} PeerId
 * @typedef {import('../types').DHTMessageHandler} DHTMessageHandler
 * @typedef {import('../../types').PeerData} PeerData
 */
/**
 * @implements {DHTMessageHandler}
 */
export class GetProvidersHandler implements DHTMessageHandler {
    /**
     * @param {object} params
     * @param {PeerId} params.peerId
     * @param {import('../../peer-routing').PeerRouting} params.peerRouting
     * @param {import('../../providers').Providers} params.providers
     * @param {import('libp2p/src/peer-store/types').PeerStore} params.peerStore
     * @param {import('../../types').Addressable} params.addressable
     * @param {boolean} [params.lan]
     */
    constructor({ peerId, peerRouting, providers, peerStore, addressable, lan }: {
        peerId: PeerId;
        peerRouting: import('../../peer-routing').PeerRouting;
        providers: import('../../providers').Providers;
        peerStore: import('libp2p/src/peer-store/types').PeerStore;
        addressable: import('../../types').Addressable;
        lan?: boolean | undefined;
    });
    _peerId: import("peer-id");
    _peerRouting: import("../../peer-routing").PeerRouting;
    _providers: import("../../providers").Providers;
    _peerStore: import("libp2p/src/peer-store/types").PeerStore;
    _addressable: import("../../types").Addressable;
    _lan: boolean;
    /**
     * Process `GetProviders` DHT messages.
     *
     * @param {PeerId} peerId
     * @param {Message} msg
     */
    handle(peerId: PeerId, msg: Message): Promise<Message>;
    /**
     * @param {PeerId} peerId
     */
    _getAddresses(peerId: PeerId): Promise<import("multiaddr").Multiaddr[]>;
    /**
     * @param {PeerId[]} peerIds
     */
    _getPeers(peerIds: PeerId[]): Promise<import("../../types").PeerData[]>;
}
import { Message } from "../../message";
//# sourceMappingURL=get-providers.d.ts.map