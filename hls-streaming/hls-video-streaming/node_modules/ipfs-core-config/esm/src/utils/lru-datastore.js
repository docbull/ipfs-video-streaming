import hashlru from 'hashlru';
import { BaseDatastore } from 'datastore-core/base';
import each from 'it-foreach';
export class LRUDatastore extends BaseDatastore {
  constructor(maxSize, datastore) {
    super();
    this.lru = hashlru(maxSize);
    this.child = datastore;
  }
  open() {
    return this.child.open();
  }
  close() {
    return this.child.close();
  }
  put(key, val, options) {
    this.lru.set(key.toString(), val);
    return this.child.put(key, val, options);
  }
  async get(key, options) {
    if (this.lru.has(key.toString())) {
      return this.lru.get(key.toString());
    }
    return this.child.get(key, options);
  }
  async has(key, options) {
    if (this.lru.has(key.toString())) {
      return true;
    }
    return this.child.has(key, options);
  }
  delete(key, options) {
    this.lru.remove(key.toString());
    return this.child.delete(key, options);
  }
  async *putMany(source, options) {
    yield* this.child.putMany(each(source, pair => {
      this.lru.set(pair.key.toString(), pair.value);
    }), options);
  }
  async *getMany(source, options) {
    for await (const key of source) {
      if (this.lru.has(key.toString())) {
        yield this.lru.get(key.toString());
      }
      yield this.child.get(key, options);
    }
  }
  async *deleteMany(source, options) {
    yield* this.child.deleteMany(each(source, key => {
      this.lru.remove(key.toString());
    }), options);
  }
  batch() {
    return this.child.batch();
  }
  async *query(q, options) {
    yield* this.child.query(q, options);
  }
  async *queryKeys(q, options) {
    yield* this.child.queryKeys(q, options);
  }
}