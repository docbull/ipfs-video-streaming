export type Pushable = import('it-pushable').Pushable<Uint8Array | BufferList>;
export type AbortOptions = import('./types').AbortOptions;
/**
 * @param {Uint8Array | BufferList | string} buffer
 * @returns {Uint8Array}
 */
export function encode(buffer: Uint8Array | BufferList | string): Uint8Array;
/**
 * `write` encodes and writes a single buffer
 *
 * @param {Pushable} writer
 * @param {Uint8Array | BufferList | string} buffer
 */
export function write(writer: import("it-pushable").Pushable<Uint8Array | BufferList>, buffer: Uint8Array | BufferList | string): void;
/**
 * `writeAll` behaves like `write`, except it encodes an array of items as a single write
 *
 * @param {Pushable} writer
 * @param {(Uint8Array | BufferList | string)[]} buffers
 */
export function writeAll(writer: import("it-pushable").Pushable<Uint8Array | BufferList>, buffers: (Uint8Array | BufferList | string)[]): Promise<void>;
/**
 * @param {AsyncGenerator<Uint8Array | BufferList, void, number>} reader
 * @param {AbortOptions} [options]
 */
export function read(reader: AsyncGenerator<Uint8Array | BufferList, void, number>, options?: import("./types").AbortOptions | undefined): Promise<BufferList>;
import BufferList = require("bl/BufferList");
//# sourceMappingURL=multistream.d.ts.map