export type BufferList = import('bl/BufferList');
export type DuplexStream = import('./types').DuplexStream<Uint8Array | BufferList>;
export type AbortOptions = import('./types').AbortOptions;
import { PROTOCOL_ID } from "./constants";
export class Dialer extends MultistreamSelect {
    /**
     * @param {string | string[]} protocols
     * @param {AbortOptions} [options]
     */
    select(protocols: string | string[], options?: import("./types").AbortOptions | undefined): Promise<{
        stream: any;
        protocol: string;
    }>;
    /**
     * @param {AbortOptions} [options]
     */
    ls(options?: import("./types").AbortOptions | undefined): Promise<string[]>;
}
export class Listener extends MultistreamSelect {
    /**
     * @param {string | string[]} protocols
     * @param {AbortOptions} [options]
     */
    handle(protocols: string | string[], options?: import("./types").AbortOptions | undefined): Promise<{
        stream: any;
        protocol: string;
    }>;
}
/**
 * @typedef {import('bl/BufferList')} BufferList
 * @typedef {import('./types').DuplexStream<Uint8Array | BufferList>} DuplexStream
 * @typedef {import('./types').AbortOptions} AbortOptions
 */
declare class MultistreamSelect {
    /**
     * @param {DuplexStream} stream
     */
    constructor(stream: import("./types").DuplexStream<Uint8Array | import("bl/BufferList")>);
    _stream: import("./types").DuplexStream<Uint8Array | import("bl/BufferList")>;
    _shaken: boolean;
    /**
     * Perform the multistream-select handshake
     *
     * @param {AbortOptions} [options]
     */
    _handshake(options?: import("./types").AbortOptions | undefined): Promise<void>;
}
export { PROTOCOL_ID };
//# sourceMappingURL=index.d.ts.map