import { TieredDatastore } from 'datastore-core/tiered';
import get from 'dlv';
import { IpnsPubsubDatastore } from './pubsub-datastore.js';
import { OfflineDatastore } from './offline-datastore.js';
import { DHTDatastore } from './dht-datastore.js';
export function createRouting({libp2p, repo, peerId, options}) {
  const ipnsStores = [];
  let pubsubDs;
  if (get(options, 'EXPERIMENTAL.ipnsPubsub', false)) {
    const pubsub = libp2p.pubsub;
    const localDatastore = repo.datastore;
    pubsubDs = new IpnsPubsubDatastore(pubsub, localDatastore, peerId);
    ipnsStores.push(pubsubDs);
  }
  if (!get(options, 'offline', false) && libp2p._config && libp2p._config.dht && libp2p._config.dht.enabled) {
    ipnsStores.push(new DHTDatastore(libp2p._dht));
  }
  if (get(options, 'offline', false) || ipnsStores.length === 0) {
    const offlineDatastore = new OfflineDatastore(repo);
    ipnsStores.push(offlineDatastore);
  }
  return new TieredDatastore(ipnsStores);
}