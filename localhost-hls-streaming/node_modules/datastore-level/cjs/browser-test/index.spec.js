'use strict';

var chai_js = require('aegir/utils/chai.js');
var levelmem = require('level-mem');
var leveljs = require('level');
var index = require('../src/index.js');
var tempdir = require('ipfs-utils/src/temp-dir.js');
var interfaceDatastoreTests = require('interface-datastore-tests');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var levelmem__default = /*#__PURE__*/_interopDefaultLegacy(levelmem);
var leveljs__default = /*#__PURE__*/_interopDefaultLegacy(leveljs);
var tempdir__default = /*#__PURE__*/_interopDefaultLegacy(tempdir);

describe('LevelDatastore', () => {
  describe('initialization', () => {
    it('should default to a leveldown database', async () => {
      const levelStore = new index.LevelDatastore('init-default');
      await levelStore.open();
      chai_js.expect(levelStore.db.options).to.include({
        createIfMissing: true,
        errorIfExists: false
      });
      chai_js.expect(levelStore.db.db.codec.opts).to.include({ valueEncoding: 'binary' });
    });
    it('should be able to override the database', async () => {
      const levelStore = new index.LevelDatastore('init-default', {
        db: levelmem__default["default"],
        createIfMissing: true,
        errorIfExists: true
      });
      await levelStore.open();
      chai_js.expect(levelStore.db.options).to.include({
        createIfMissing: true,
        errorIfExists: true
      });
    });
  });
  [
    levelmem__default["default"],
    leveljs__default["default"]
  ].forEach(database => {
    describe(`interface-datastore ${ database.name }`, () => {
      interfaceDatastoreTests.interfaceDatastoreTests({
        setup: () => new index.LevelDatastore(tempdir__default["default"](), { db: database }),
        teardown() {
        }
      });
    });
  });
});
