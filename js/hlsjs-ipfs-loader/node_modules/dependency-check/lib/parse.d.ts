export type ParseOptions = {
    path: string;
    package: import('read-pkg').NormalizedPackageJson;
    extensions: import('./extensions').Extensions;
    builtins: undefined | boolean;
    noDefaultEntries: undefined | boolean;
    entries: undefined | string[];
};
export type ParseResult = {
    package: import('read-pkg').NormalizedPackageJson;
    used: string[];
    builtins?: string[] | undefined;
};
/**
 * @typedef ParseOptions
 * @property {string} path
 * @property {import('read-pkg').NormalizedPackageJson} package
 * @property {import('./extensions').Extensions} extensions
 * @property {undefined|boolean} builtins
 * @property {undefined|boolean} noDefaultEntries
 * @property {undefined|string[]} entries
 */
/**
 * @typedef ParseResult
 * @property {import('read-pkg').NormalizedPackageJson} package
 * @property {string[]} used
 * @property {string[]} [builtins]
 */
/**
 * @param {ParseOptions} opts
 * @returns {Promise<ParseResult>}
 */
export function parse(opts: ParseOptions): Promise<ParseResult>;
//# sourceMappingURL=parse.d.ts.map